{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.3", "generated_at": "2023-10-10T11:47:34.105303Z", "invocation_id": "ef47e500-430a-427b-8967-f009e931bc58", "env": {}, "project_name": "bq_evo", "project_id": "07321a3b7d51f91ac95a8f1bef5c13de", "user_id": "d3566f7c-ccb3-445d-a70f-023dab4733ed", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.bq_evo.int_bing_ads_campaign_performance_joined_campaign_names": {"database": "oss-big-query-dashboard-prod", "schema": "intermediate", "name": "int_bing_ads_campaign_performance_joined_campaign_names", "resource_type": "model", "package_name": "bq_evo", "path": "intermediate\\bing_ads\\int_bing_ads_campaign_performance_joined_campaign_names.sql", "original_file_path": "models\\intermediate\\bing_ads\\int_bing_ads_campaign_performance_joined_campaign_names.sql", "unique_id": "model.bq_evo.int_bing_ads_campaign_performance_joined_campaign_names", "fqn": ["bq_evo", "intermediate", "bing_ads", "int_bing_ads_campaign_performance_joined_campaign_names"], "alias": "int_bing_ads_campaign_performance_joined_campaign_names", "checksum": {"name": "sha256", "checksum": "2608e0b2220cd3f7edf289342fc093037bb4aa27c2a2684040435956fe349379"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt die wichtigsten Performancestatistiken auf Kampagnenebene.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "intermediate"}, "created_at": 1696938456.1453366, "relation_name": "`oss-big-query-dashboard-prod`.`intermediate`.`int_bing_ads_campaign_performance_joined_campaign_names`", "raw_code": "WITH _raw_performance AS(\r\n    SELECT *\r\n    FROM {{ ref('stg_bing_ads_campaign_performance_daily_report')}}\r\n),\r\n\r\n_raw_unique_campaigns AS(\r\n    SELECT *\r\n    FROM {{ ref('int_bing_ads_unique_campaigns')}}\r\n),\r\n\r\n_joined AS(\r\n    SELECT * FROM _raw_unique_campaigns\r\n    INNER JOIN _raw_performance\r\n    ON _raw_unique_campaigns.id = _raw_performance.campaign_id\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _joined\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "stg_bing_ads_campaign_performance_daily_report", "package": null, "version": null}, {"name": "int_bing_ads_unique_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.stg_bing_ads_campaign_performance_daily_report", "model.bq_evo.int_bing_ads_unique_campaigns"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\bing_ads\\int_bing_ads_campaign_performance_joined_campaign_names.sql", "compiled": true, "compiled_code": "WITH _raw_performance AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`staging`.`stg_bing_ads_campaign_performance_daily_report`\n),\n\n_raw_unique_campaigns AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_bing_ads_unique_campaigns`\n),\n\n_joined AS(\n    SELECT * FROM _raw_unique_campaigns\n    INNER JOIN _raw_performance\n    ON _raw_unique_campaigns.id = _raw_performance.campaign_id\n),\n\n_final AS(\n    SELECT *\n    FROM _joined\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.int_bing_ads_unique_campaigns": {"database": "oss-big-query-dashboard-prod", "schema": "intermediate", "name": "int_bing_ads_unique_campaigns", "resource_type": "model", "package_name": "bq_evo", "path": "intermediate\\bing_ads\\int_bing_ads_unique_campaigns.sql", "original_file_path": "models\\intermediate\\bing_ads\\int_bing_ads_unique_campaigns.sql", "unique_id": "model.bq_evo.int_bing_ads_unique_campaigns", "fqn": ["bq_evo", "intermediate", "bing_ads", "int_bing_ads_unique_campaigns"], "alias": "int_bing_ads_unique_campaigns", "checksum": {"name": "sha256", "checksum": "160b61de19e45773becd6a372a0f1a1dcd64963fd0e4504ba0c9c4cd8af6870b"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt eine \u00dcbersicht aller Kampagnen ohne historische Informationen. Dient als einfache Datenbank der wichtigsten Metainfos der Kampagnen. Jede Kampagne hat genau einen Eintrag.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "intermediate"}, "created_at": 1696938456.1443367, "relation_name": "`oss-big-query-dashboard-prod`.`intermediate`.`int_bing_ads_unique_campaigns`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ ref('stg_bing_ads_campaign_history')}}\r\n),\r\n\r\n_distinct_campaigns AS(\r\n    SELECT\r\n        MAX(id) as id,\r\n        MAX(name) as Campaign,\r\n        MAX(Source) as Source,\r\n        MAX(Medium) as Medium,\r\n        MAX(Partner) as Partner,\r\n        CampaignID\r\n    FROM _raw\r\n    GROUP BY 6\r\n),\r\n\r\n_final AS(\r\n    SELECT * \r\n    FROM _distinct_campaigns\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "stg_bing_ads_campaign_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.stg_bing_ads_campaign_history"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\bing_ads\\int_bing_ads_unique_campaigns.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`staging`.`stg_bing_ads_campaign_history`\n),\n\n_distinct_campaigns AS(\n    SELECT\n        MAX(id) as id,\n        MAX(name) as Campaign,\n        MAX(Source) as Source,\n        MAX(Medium) as Medium,\n        MAX(Partner) as Partner,\n        CampaignID\n    FROM _raw\n    GROUP BY 6\n),\n\n_final AS(\n    SELECT * \n    FROM _distinct_campaigns\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.int_google_ads_campaign_stats": {"database": "oss-big-query-dashboard-prod", "schema": "intermediate", "name": "int_google_ads_campaign_stats", "resource_type": "model", "package_name": "bq_evo", "path": "intermediate\\google_ads\\int_google_ads_campaign_stats.sql", "original_file_path": "models\\intermediate\\google_ads\\int_google_ads_campaign_stats.sql", "unique_id": "model.bq_evo.int_google_ads_campaign_stats", "fqn": ["bq_evo", "intermediate", "google_ads", "int_google_ads_campaign_stats"], "alias": "int_google_ads_campaign_stats", "checksum": {"name": "sha256", "checksum": "96a72fb66a08a5d695f2f642e17c62c68a021555fb646b8a53a19fbdd093c0f7"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt die wichtigsten Performancestatistiken auf Kampagnenebene.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "intermediate"}, "created_at": 1696938456.1443367, "relation_name": "`oss-big-query-dashboard-prod`.`intermediate`.`int_google_ads_campaign_stats`", "raw_code": "WITH _raw_stats AS (\r\n  SELECT *\r\n  FROM {{ ref('stg_google_ads_campaign_stats')}}\r\n),\r\n\r\n_select_stats_columns AS(\r\n  SELECT\r\n      date,\r\n      \r\n      --Dimensionen\r\n      id,\r\n      ad_network_type,\r\n      device,\r\n\r\n      --Basismetriken\r\n      impressions,\r\n      clicks,\r\n      cost,\r\n      conversions,\r\n\r\n      --Erweiterte Metriken\r\n      conversions_value,\r\n      interactions,\r\n      view_through_conversions,\r\n      active_view_impressions,\r\n      active_view_measurability,\r\n      active_view_measurable_cost_micros,\r\n      active_view_measurable_impressions,\r\n      active_view_viewability\r\n  FROM _raw_stats\r\n),\r\n\r\n_unique_campaigns AS(\r\n  SELECT \r\n    id as c_id,\r\n    campaign as Campaign,\r\n    Source,\r\n    Medium,\r\n    Partner,\r\n    CampaignID\r\n  FROM {{ref('int_google_ads_unique_campaigns')}}\r\n),\r\n\r\n_final AS(\r\n  SELECT *\r\n  FROM _raw_stats\r\n  LEFT OUTER JOIN _unique_campaigns ON _raw_stats.id = _unique_campaigns.c_id \r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "stg_google_ads_campaign_stats", "package": null, "version": null}, {"name": "int_google_ads_unique_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.stg_google_ads_campaign_stats", "model.bq_evo.int_google_ads_unique_campaigns"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\google_ads\\int_google_ads_campaign_stats.sql", "compiled": true, "compiled_code": "WITH _raw_stats AS (\n  SELECT *\n  FROM `oss-big-query-dashboard-prod`.`staging`.`stg_google_ads_campaign_stats`\n),\n\n_select_stats_columns AS(\n  SELECT\n      date,\n      \n      --Dimensionen\n      id,\n      ad_network_type,\n      device,\n\n      --Basismetriken\n      impressions,\n      clicks,\n      cost,\n      conversions,\n\n      --Erweiterte Metriken\n      conversions_value,\n      interactions,\n      view_through_conversions,\n      active_view_impressions,\n      active_view_measurability,\n      active_view_measurable_cost_micros,\n      active_view_measurable_impressions,\n      active_view_viewability\n  FROM _raw_stats\n),\n\n_unique_campaigns AS(\n  SELECT \n    id as c_id,\n    campaign as Campaign,\n    Source,\n    Medium,\n    Partner,\n    CampaignID\n  FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_google_ads_unique_campaigns`\n),\n\n_final AS(\n  SELECT *\n  FROM _raw_stats\n  LEFT OUTER JOIN _unique_campaigns ON _raw_stats.id = _unique_campaigns.c_id \n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.int_google_ads_unique_campaigns": {"database": "oss-big-query-dashboard-prod", "schema": "intermediate", "name": "int_google_ads_unique_campaigns", "resource_type": "model", "package_name": "bq_evo", "path": "intermediate\\google_ads\\int_google_ads_unique_campaigns.sql", "original_file_path": "models\\intermediate\\google_ads\\int_google_ads_unique_campaigns.sql", "unique_id": "model.bq_evo.int_google_ads_unique_campaigns", "fqn": ["bq_evo", "intermediate", "google_ads", "int_google_ads_unique_campaigns"], "alias": "int_google_ads_unique_campaigns", "checksum": {"name": "sha256", "checksum": "e1a6d9e79450383273b1cddf660b5ee614ae57f8ca38e3516b5b16bc55fb5ba0"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt eine \u00dcbersicht aller Kampagnen ohne historische Informationen. Dient als einfache Datenbank der wichtigsten Metainfos der Kampagnen. Jede Kampagne hat genau einen Eintrag.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "intermediate"}, "created_at": 1696938456.1443367, "relation_name": "`oss-big-query-dashboard-prod`.`intermediate`.`int_google_ads_unique_campaigns`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ ref('stg_google_ads_campaign_history')}}\r\n),\r\n\r\n_distinct_campaigns AS(\r\n    SELECT\r\n        MAX(id) as id ,\r\n        MAX(campaign) as campaign,\r\n        MAX(Source) as Source,\r\n        MAX(Medium) as Medium,\r\n        MAX(Partner) as Partner,\r\n        CampaignID\r\n    FROM _raw\r\n    GROUP BY 6\r\n),\r\n\r\n_final AS(\r\n    SELECT * \r\n    FROM _distinct_campaigns\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "stg_google_ads_campaign_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.stg_google_ads_campaign_history"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\google_ads\\int_google_ads_unique_campaigns.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`staging`.`stg_google_ads_campaign_history`\n),\n\n_distinct_campaigns AS(\n    SELECT\n        MAX(id) as id ,\n        MAX(campaign) as campaign,\n        MAX(Source) as Source,\n        MAX(Medium) as Medium,\n        MAX(Partner) as Partner,\n        CampaignID\n    FROM _raw\n    GROUP BY 6\n),\n\n_final AS(\n    SELECT * \n    FROM _distinct_campaigns\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.int_google_analytics_all_campaigns": {"database": "oss-big-query-dashboard-prod", "schema": "intermediate", "name": "int_google_analytics_all_campaigns", "resource_type": "model", "package_name": "bq_evo", "path": "intermediate\\google_analytics\\int_google_analytics_all_campaigns.sql", "original_file_path": "models\\intermediate\\google_analytics\\int_google_analytics_all_campaigns.sql", "unique_id": "model.bq_evo.int_google_analytics_all_campaigns", "fqn": ["bq_evo", "intermediate", "google_analytics", "int_google_analytics_all_campaigns"], "alias": "int_google_analytics_all_campaigns", "checksum": {"name": "sha256", "checksum": "27f2c3902cc3e65fb64d106273eec10310519a88b07499bde0112f7ba8e9007a"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt alle Kampagnen aus GA4 und GA3.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "intermediate"}, "created_at": 1696938456.1453366, "relation_name": "`oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_all_campaigns`", "raw_code": "WITH _historic_ua_campaigns AS(\r\n    SELECT *\r\n    FROM {{ref('stg_google_analytics_historic_campaigns')}}\r\n),\r\n\r\nga4_campaigns AS(\r\n    SELECT \r\n        MAX(Campaign),\r\n        MAX(Partner),\r\n        MAX(Source),\r\n        MAX(Medium),\r\n        CampaignID\r\n    FROM {{ref('int_google_analytics_all_events')}}\r\n    GROUP BY 5\r\n),\r\n\r\n_final AS(\r\n    SELECT * FROM _historic_ua_campaigns\r\n    UNION DISTINCT\r\n    SELECT * FROM ga4_campaigns\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "stg_google_analytics_historic_campaigns", "package": null, "version": null}, {"name": "int_google_analytics_all_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.stg_google_analytics_historic_campaigns", "model.bq_evo.int_google_analytics_all_events"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\google_analytics\\int_google_analytics_all_campaigns.sql", "compiled": true, "compiled_code": "WITH _historic_ua_campaigns AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`staging`.`stg_google_analytics_historic_campaigns`\n),\n\nga4_campaigns AS(\n    SELECT \n        MAX(Campaign),\n        MAX(Partner),\n        MAX(Source),\n        MAX(Medium),\n        CampaignID\n    FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_all_events`\n    GROUP BY 5\n),\n\n_final AS(\n    SELECT * FROM _historic_ua_campaigns\n    UNION DISTINCT\n    SELECT * FROM ga4_campaigns\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.int_google_analytics_all_events": {"database": "oss-big-query-dashboard-prod", "schema": "intermediate", "name": "int_google_analytics_all_events", "resource_type": "model", "package_name": "bq_evo", "path": "intermediate\\google_analytics\\int_google_analytics_all_events.sql", "original_file_path": "models\\intermediate\\google_analytics\\int_google_analytics_all_events.sql", "unique_id": "model.bq_evo.int_google_analytics_all_events", "fqn": ["bq_evo", "intermediate", "google_analytics", "int_google_analytics_all_events"], "alias": "int_google_analytics_all_events", "checksum": {"name": "sha256", "checksum": "019bb2d0684f073381573190fa33a907554d7fa7f4bb1bdda49ecff22fe75b17"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt alle Events und NDG-Kampagnenschl\u00fcssel.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "intermediate"}, "created_at": 1696938456.1453366, "relation_name": "`oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_all_events`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ ref('stg_google_analytics_352128287')}}\r\n),\r\n\r\n_added_partner AS(\r\n    SELECT \r\n        *,\r\n        'EVO' as Partner\r\n    FROM _raw\r\n),\r\n\r\n_rename_columns AS(\r\n    SELECT\r\n        * EXCEPT(utm_campaign, utm_source, utm_medium),\r\n        utm_campaign as Campaign,\r\n        utm_source as Source,\r\n        utm_medium as Medium,\r\n        LOWER (CONCAT(utm_campaign, utm_source, utm_medium, Partner)) as CampaignID\r\n    FROM _added_partner\r\n),\r\n\r\n_add_default_channel_groupings AS(\r\n    SELECT *,\r\n        case\r\n            when (Source = 'direct' or Source is null or Source = '(direct)') \r\n                and (regexp_contains(Medium, r'^(\\(not set\\)|\\(none\\))$') or Medium is null) \r\n                then 'direct'\r\n            when regexp_contains(Campaign, r'^(.*pmax.*|.*cross-network.*)$') \r\n                then 'cross-network'\r\n            when regexp_contains(Campaign, r'^(.*shop.*)$') \r\n                and regexp_contains(Medium, r'^(.*cp.*|ppc|paid.*)$') \r\n                then 'shopping_paid'\r\n            when regexp_contains(Source, r'^(google|bing)$') \r\n                and regexp_contains(Medium, r'^(.*cp.*|ppc|paid.*)$') \r\n                then 'search_paid'\r\n            when regexp_contains(Source, r'^(twitter|facebook|fb|instagram|ig|linkedin|pinterest)$')\r\n                and regexp_contains(Medium, r'^(.*cp.*|ppc|paid.*|social_paid)$') \r\n                then 'social_paid'\r\n            when regexp_contains(Source, r'^(youtube)$')\r\n                and regexp_contains(Medium, r'^(.*cp.*|ppc|paid.*)$') \r\n                then 'video_paid'\r\n            when regexp_contains(Medium, r'^(display|banner|expandable|interstitial|cpm)$') \r\n                then 'display'\r\n            when regexp_contains(Medium, r'^(.*cp.*|ppc|paid.*)$') \r\n                then 'other_paid'\r\n            when regexp_contains(Medium, r'^(.*shop.*)$') \r\n                then 'shopping_organic'\r\n            when regexp_contains(Source, r'^.*(twitter|t\\.co|facebook|instagram|linkedin|lnkd\\.in|pinterest).*') \r\n                and regexp_contains(Medium, r'^(.*cp.*|ppc|paid.*)$') \r\n                then 'social_paid'\r\n            when regexp_contains(Source, r'^.*(twitter|t\\.co|facebook|instagram|linkedin|lnkd\\.in|pinterest).*') \r\n                or regexp_contains(Medium, r'^(social|social_advertising|social-advertising|social_network|social-network|social_media|social-media|sm|social-unpaid|social_unpaid)$') \r\n                then 'social_organic'\r\n            when regexp_contains(Medium, r'^(.*video.*)$') \r\n                then 'video_organic'\r\n            when regexp_contains(Source, r'^(google|bing|yahoo|baidu|duckduckgo|yandex|ask)$') \r\n                or Medium = 'organic'\r\n                then 'search_organic'\r\n            when regexp_contains(Source, r'^(email|mail|e-mail|e_mail|e mail|mail\\.google\\.com)$') \r\n                or regexp_contains(Medium, r'^(email|mail|e-mail|e_mail|e mail)$') \r\n                then 'email'\r\n            when regexp_contains(Medium, r'^(affiliate|affiliates)$') \r\n                then 'affiliate'\r\n            when Medium = 'referral'\r\n                then 'referral'\r\n            when Medium = 'audio' \r\n                then 'audio'\r\n            when Medium = 'sms'\r\n                then 'sms'\r\n            when ends_with(Medium, 'push')\r\n                or regexp_contains(Medium, r'.*(mobile|notification).*') \r\n                then 'mobile_push'\r\n            else '(other)'\r\n        end AS default_channel_grouping\r\n    FROM _rename_columns\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _add_default_channel_groupings\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "stg_google_analytics_352128287", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.stg_google_analytics_352128287"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\google_analytics\\int_google_analytics_all_events.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`staging`.`stg_google_analytics_352128287`\n),\n\n_added_partner AS(\n    SELECT \n        *,\n        'EVO' as Partner\n    FROM _raw\n),\n\n_rename_columns AS(\n    SELECT\n        * EXCEPT(utm_campaign, utm_source, utm_medium),\n        utm_campaign as Campaign,\n        utm_source as Source,\n        utm_medium as Medium,\n        LOWER (CONCAT(utm_campaign, utm_source, utm_medium, Partner)) as CampaignID\n    FROM _added_partner\n),\n\n_add_default_channel_groupings AS(\n    SELECT *,\n        case\n            when (Source = 'direct' or Source is null or Source = '(direct)') \n                and (regexp_contains(Medium, r'^(\\(not set\\)|\\(none\\))$') or Medium is null) \n                then 'direct'\n            when regexp_contains(Campaign, r'^(.*pmax.*|.*cross-network.*)$') \n                then 'cross-network'\n            when regexp_contains(Campaign, r'^(.*shop.*)$') \n                and regexp_contains(Medium, r'^(.*cp.*|ppc|paid.*)$') \n                then 'shopping_paid'\n            when regexp_contains(Source, r'^(google|bing)$') \n                and regexp_contains(Medium, r'^(.*cp.*|ppc|paid.*)$') \n                then 'search_paid'\n            when regexp_contains(Source, r'^(twitter|facebook|fb|instagram|ig|linkedin|pinterest)$')\n                and regexp_contains(Medium, r'^(.*cp.*|ppc|paid.*|social_paid)$') \n                then 'social_paid'\n            when regexp_contains(Source, r'^(youtube)$')\n                and regexp_contains(Medium, r'^(.*cp.*|ppc|paid.*)$') \n                then 'video_paid'\n            when regexp_contains(Medium, r'^(display|banner|expandable|interstitial|cpm)$') \n                then 'display'\n            when regexp_contains(Medium, r'^(.*cp.*|ppc|paid.*)$') \n                then 'other_paid'\n            when regexp_contains(Medium, r'^(.*shop.*)$') \n                then 'shopping_organic'\n            when regexp_contains(Source, r'^.*(twitter|t\\.co|facebook|instagram|linkedin|lnkd\\.in|pinterest).*') \n                and regexp_contains(Medium, r'^(.*cp.*|ppc|paid.*)$') \n                then 'social_paid'\n            when regexp_contains(Source, r'^.*(twitter|t\\.co|facebook|instagram|linkedin|lnkd\\.in|pinterest).*') \n                or regexp_contains(Medium, r'^(social|social_advertising|social-advertising|social_network|social-network|social_media|social-media|sm|social-unpaid|social_unpaid)$') \n                then 'social_organic'\n            when regexp_contains(Medium, r'^(.*video.*)$') \n                then 'video_organic'\n            when regexp_contains(Source, r'^(google|bing|yahoo|baidu|duckduckgo|yandex|ask)$') \n                or Medium = 'organic'\n                then 'search_organic'\n            when regexp_contains(Source, r'^(email|mail|e-mail|e_mail|e mail|mail\\.google\\.com)$') \n                or regexp_contains(Medium, r'^(email|mail|e-mail|e_mail|e mail)$') \n                then 'email'\n            when regexp_contains(Medium, r'^(affiliate|affiliates)$') \n                then 'affiliate'\n            when Medium = 'referral'\n                then 'referral'\n            when Medium = 'audio' \n                then 'audio'\n            when Medium = 'sms'\n                then 'sms'\n            when ends_with(Medium, 'push')\n                or regexp_contains(Medium, r'.*(mobile|notification).*') \n                then 'mobile_push'\n            else '(other)'\n        end AS default_channel_grouping\n    FROM _rename_columns\n),\n\n_final AS(\n    SELECT *\n    FROM _add_default_channel_groupings\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.int_google_analytics_all_purchases_GA4": {"database": "oss-big-query-dashboard-prod", "schema": "intermediate", "name": "int_google_analytics_all_purchases_GA4", "resource_type": "model", "package_name": "bq_evo", "path": "intermediate\\google_analytics\\int_google_analytics_all_purchases_GA4.sql", "original_file_path": "models\\intermediate\\google_analytics\\int_google_analytics_all_purchases_GA4.sql", "unique_id": "model.bq_evo.int_google_analytics_all_purchases_GA4", "fqn": ["bq_evo", "intermediate", "google_analytics", "int_google_analytics_all_purchases_GA4"], "alias": "int_google_analytics_all_purchases_GA4", "checksum": {"name": "sha256", "checksum": "4ddc939ebed224ace6864d88c8b0e49d4cdb5389641574e440c83ddbc9e4ab87"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt alle <purchase-events> aus Google Analytics 4. Inkl. aller zugeh\u00f6rigen Metainformationen aus GA4.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "intermediate"}, "created_at": 1696938456.1473234, "relation_name": "`oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_all_purchases_GA4`", "raw_code": "WITH _raw AS(\r\n  SELECT *\r\n  FROM {{ ref('int_google_analytics_all_events')}}\r\n),\r\n\r\n_select_purchase_events AS(\r\n  SELECT * FROM _raw\r\n  WHERE event_name = \"purchase\"\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _select_purchase_events\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "int_google_analytics_all_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.int_google_analytics_all_events"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\google_analytics\\int_google_analytics_all_purchases_GA4.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n  SELECT *\n  FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_all_events`\n),\n\n_select_purchase_events AS(\n  SELECT * FROM _raw\n  WHERE event_name = \"purchase\"\n),\n\n_final AS(\n    SELECT *\n    FROM _select_purchase_events\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.int_google_analytics_NDG_conversionevents_GA4": {"database": "oss-big-query-dashboard-prod", "schema": "intermediate", "name": "int_google_analytics_NDG_conversionevents_GA4", "resource_type": "model", "package_name": "bq_evo", "path": "intermediate\\google_analytics\\int_google_analytics_NDG_conversionevents_GA4.sql", "original_file_path": "models\\intermediate\\google_analytics\\int_google_analytics_NDG_conversionevents_GA4.sql", "unique_id": "model.bq_evo.int_google_analytics_NDG_conversionevents_GA4", "fqn": ["bq_evo", "intermediate", "google_analytics", "int_google_analytics_NDG_conversionevents_GA4"], "alias": "int_google_analytics_NDG_conversionevents_GA4", "checksum": {"name": "sha256", "checksum": "68f03bd4c39b5204a72f403058b467a7a88cdb5a296e378a155850af328caa4b"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt alle relevanten Conversionevents aus Google Analytics 4 f\u00fcr NDG-Vermarktung. Inklusive aller E-Commerce-Events (ohne Metainformationen).", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ZielvorhabenID": {"name": "ZielvorhabenID", "description": "Relevante ID f\u00fcr das Reporting von Next Digital.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ZielvorhabenName": {"name": "ZielvorhabenName", "description": "Vorherige Bezeichnung = event_name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "Keyword": {"name": "Keyword", "description": "Aufgrund enormer Speicherauswirkungen wird die Spalte aus den Datenquellen nicht bezogen. Enth\u00e4lt daher zum Status-Quo keine Informationen (19.09.2023).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "KeywordMatchType": {"name": "KeywordMatchType", "description": "Aufgrund enormer Speicherauswirkungen wird die Spalte aus den Datenquellen nicht bezogen. Enth\u00e4lt daher zum Status-Quo keine Informationen (19.09.2023).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "intermediate"}, "created_at": 1696938456.1463318, "relation_name": "`oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_NDG_conversionevents_GA4`", "raw_code": "WITH _raw AS(\r\n  SELECT *\r\n  FROM {{ ref('int_google_analytics_all_events')}}\r\n),\r\n\r\n_conversions_NDG as(\r\n  SELECT \r\n    event_date as Date,\r\n    event_name as ZielvorhabenName, \r\n    CampaignID,\r\n    Source,\r\n    Medium,\r\n\r\n    MAX(Partner) as Partner,\r\n\r\n    count(event_date) as Conversions,\r\n\r\n  FROM _raw\r\n  WHERE (\r\n    event_name = 'lead_form_evo_solar_lp' OR\r\n    event_name = 'evo_solar_pva_check_sent_available' OR\r\n    event_name = 'contact_form_button' OR\r\n    event_name = 'click_online_application' OR\r\n    event_name = 'oss_registration_doi' OR\r\n    event_name = 'click_tarifrechnernutzung' OR\r\n    event_name = 'conversion_solarrechner' OR\r\n    event_name = 'purchase'\r\n  )\r\n\r\n  GROUP BY 1,2,3,4,5\r\n),\r\n\r\n_added_columns AS(\r\n  SELECT \r\n      Date,\r\n      ZielvorhabenName,\r\n      LOWER(CONCAT(ZielvorhabenName, Partner)) as ZielvorhabenID,\r\n      CampaignID,\r\n      Source,\r\n      Medium,\r\n      Partner,\r\n      '(not set)' as Keyword,\r\n      '(not set)' as KeywordMatchType,\r\n      Conversions\r\n  FROM _conversions_NDG\r\n),\r\n\r\n_final AS(\r\n  SELECT *\r\n  FROM _added_columns\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "int_google_analytics_all_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.int_google_analytics_all_events"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\google_analytics\\int_google_analytics_NDG_conversionevents_GA4.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n  SELECT *\n  FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_all_events`\n),\n\n_conversions_NDG as(\n  SELECT \n    event_date as Date,\n    event_name as ZielvorhabenName, \n    CampaignID,\n    Source,\n    Medium,\n\n    MAX(Partner) as Partner,\n\n    count(event_date) as Conversions,\n\n  FROM _raw\n  WHERE (\n    event_name = 'lead_form_evo_solar_lp' OR\n    event_name = 'evo_solar_pva_check_sent_available' OR\n    event_name = 'contact_form_button' OR\n    event_name = 'click_online_application' OR\n    event_name = 'oss_registration_doi' OR\n    event_name = 'click_tarifrechnernutzung' OR\n    event_name = 'conversion_solarrechner' OR\n    event_name = 'purchase'\n  )\n\n  GROUP BY 1,2,3,4,5\n),\n\n_added_columns AS(\n  SELECT \n      Date,\n      ZielvorhabenName,\n      LOWER(CONCAT(ZielvorhabenName, Partner)) as ZielvorhabenID,\n      CampaignID,\n      Source,\n      Medium,\n      Partner,\n      '(not set)' as Keyword,\n      '(not set)' as KeywordMatchType,\n      Conversions\n  FROM _conversions_NDG\n),\n\n_final AS(\n  SELECT *\n  FROM _added_columns\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.int_linkedin_campaign_stats_joined_campaign_names": {"database": "oss-big-query-dashboard-prod", "schema": "intermediate", "name": "int_linkedin_campaign_stats_joined_campaign_names", "resource_type": "model", "package_name": "bq_evo", "path": "intermediate\\linkedin\\int_linkedin_campaign_stats_joined_campaign_names.sql", "original_file_path": "models\\intermediate\\linkedin\\int_linkedin_campaign_stats_joined_campaign_names.sql", "unique_id": "model.bq_evo.int_linkedin_campaign_stats_joined_campaign_names", "fqn": ["bq_evo", "intermediate", "linkedin", "int_linkedin_campaign_stats_joined_campaign_names"], "alias": "int_linkedin_campaign_stats_joined_campaign_names", "checksum": {"name": "sha256", "checksum": "b7ee0d8ac54e4356589a76570cde65274af8ee278419c65f2ccfcb88f9e2d237"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt die wichtigsten Performancestatistiken auf Kampagnenebene.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "intermediate"}, "created_at": 1696938456.148326, "relation_name": "`oss-big-query-dashboard-prod`.`intermediate`.`int_linkedin_campaign_stats_joined_campaign_names`", "raw_code": "WITH _raw_performance AS(\r\n    SELECT *\r\n    FROM {{ ref('stg_linkedin_ad_analytics_by_campaign')}}\r\n),\r\n\r\n_raw_unique_campaigns AS(\r\n    SELECT *\r\n    FROM {{ ref('int_linkedin_unique_campaigns_reduced_information')}}\r\n),\r\n\r\n_joined AS(\r\n    SELECT * FROM _raw_unique_campaigns\r\n    INNER JOIN _raw_performance\r\n    ON _raw_unique_campaigns.campaign_id = _raw_performance.campaign_id\r\n),\r\n\r\n_drop_campaign_id AS(\r\n    SELECT * EXCEPT (campaign_id)\r\n    FROM _joined\r\n),\r\n\r\n_final AS(\r\n    SELECT \r\n        * EXCEPT(Date),\r\n        CAST(Date AS DATE) as Date\r\n    FROM _drop_campaign_id\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "stg_linkedin_ad_analytics_by_campaign", "package": null, "version": null}, {"name": "int_linkedin_unique_campaigns_reduced_information", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.stg_linkedin_ad_analytics_by_campaign", "model.bq_evo.int_linkedin_unique_campaigns_reduced_information"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\linkedin\\int_linkedin_campaign_stats_joined_campaign_names.sql", "compiled": true, "compiled_code": "WITH _raw_performance AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`staging`.`stg_linkedin_ad_analytics_by_campaign`\n),\n\n_raw_unique_campaigns AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_linkedin_unique_campaigns_reduced_information`\n),\n\n_joined AS(\n    SELECT * FROM _raw_unique_campaigns\n    INNER JOIN _raw_performance\n    ON _raw_unique_campaigns.campaign_id = _raw_performance.campaign_id\n),\n\n_drop_campaign_id AS(\n    SELECT * EXCEPT (campaign_id)\n    FROM _joined\n),\n\n_final AS(\n    SELECT \n        * EXCEPT(Date),\n        CAST(Date AS DATE) as Date\n    FROM _drop_campaign_id\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.int_linkedin_unique_campaigns_reduced_information": {"database": "oss-big-query-dashboard-prod", "schema": "intermediate", "name": "int_linkedin_unique_campaigns_reduced_information", "resource_type": "model", "package_name": "bq_evo", "path": "intermediate\\linkedin\\int_linkedin_unique_campaigns_reduced_information.sql", "original_file_path": "models\\intermediate\\linkedin\\int_linkedin_unique_campaigns_reduced_information.sql", "unique_id": "model.bq_evo.int_linkedin_unique_campaigns_reduced_information", "fqn": ["bq_evo", "intermediate", "linkedin", "int_linkedin_unique_campaigns_reduced_information"], "alias": "int_linkedin_unique_campaigns_reduced_information", "checksum": {"name": "sha256", "checksum": "5d419be432921cfed74989a440f0948cefa586a14a84fb9976dd278310dabf82"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt eine \u00dcbersicht aller Kampagnen ohne historische Informationen. Dient als einfache Datenbank der wichtigsten Metainfos der Kampagnen. Jede Kampagne hat genau einen Eintrag.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "intermediate"}, "created_at": 1696938456.1473234, "relation_name": "`oss-big-query-dashboard-prod`.`intermediate`.`int_linkedin_unique_campaigns_reduced_information`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ ref('stg_linkedin_campaign_history')}}\r\n),\r\n\r\n_selected_columns AS (\r\n    SELECT\r\n        id as campaign_id,\r\n        Campaign, \r\n        \"EVO\" as Partner, \r\n        \"cpc\" as Medium, \r\n        \"linkedin\" as Source, \r\n        LOWER(CONCAT(Campaign, \"linkedin\", \"cpc\", \"EVO\")) AS CampaignID \r\n    \r\n    FROM _raw\r\n),\r\n\r\n_final AS(\r\n    SELECT \r\n        DISTINCT *\r\n    FROM _selected_columns\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "stg_linkedin_campaign_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.stg_linkedin_campaign_history"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\linkedin\\int_linkedin_unique_campaigns_reduced_information.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`staging`.`stg_linkedin_campaign_history`\n),\n\n_selected_columns AS (\n    SELECT\n        id as campaign_id,\n        Campaign, \n        \"EVO\" as Partner, \n        \"cpc\" as Medium, \n        \"linkedin\" as Source, \n        LOWER(CONCAT(Campaign, \"linkedin\", \"cpc\", \"EVO\")) AS CampaignID \n    \n    FROM _raw\n),\n\n_final AS(\n    SELECT \n        DISTINCT *\n    FROM _selected_columns\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.int_meta_campaign_stats_joined_campaign_names": {"database": "oss-big-query-dashboard-prod", "schema": "intermediate", "name": "int_meta_campaign_stats_joined_campaign_names", "resource_type": "model", "package_name": "bq_evo", "path": "intermediate\\meta\\int_meta_campaign_stats_joined_campaign_names.sql", "original_file_path": "models\\intermediate\\meta\\int_meta_campaign_stats_joined_campaign_names.sql", "unique_id": "model.bq_evo.int_meta_campaign_stats_joined_campaign_names", "fqn": ["bq_evo", "intermediate", "meta", "int_meta_campaign_stats_joined_campaign_names"], "alias": "int_meta_campaign_stats_joined_campaign_names", "checksum": {"name": "sha256", "checksum": "fed31daf9b958b5c75209167a14ecf4e54fa9dbdede49592921fabc7de9c9f2a"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt die wichtigsten Performancestatistiken auf Kampagnenebene.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "intermediate"}, "created_at": 1696938456.1473234, "relation_name": "`oss-big-query-dashboard-prod`.`intermediate`.`int_meta_campaign_stats_joined_campaign_names`", "raw_code": "WITH _raw_performance AS(\r\n    SELECT *\r\n    FROM {{ ref('stg_meta_campaign_stats')}}\r\n),\r\n\r\n_raw_unique_campaigns AS(\r\n    SELECT *\r\n    FROM {{ ref('int_meta_unique_campaigns')}}\r\n),\r\n\r\n_rename_join_column AS(\r\n    SELECT \r\n        * EXCEPT (Campaign),\r\n        Campaign as CampaignJoin\r\n    FROM _raw_unique_campaigns\r\n),\r\n\r\n_joined AS(\r\n    SELECT * FROM _rename_join_column\r\n    INNER JOIN _raw_performance\r\n    ON _rename_join_column.CampaignJoin = _raw_performance.Campaign\r\n),\r\n\r\n_final AS(\r\n    SELECT * EXCEPT (CampaignJoin)\r\n    FROM _joined\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "stg_meta_campaign_stats", "package": null, "version": null}, {"name": "int_meta_unique_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.stg_meta_campaign_stats", "model.bq_evo.int_meta_unique_campaigns"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\meta\\int_meta_campaign_stats_joined_campaign_names.sql", "compiled": true, "compiled_code": "WITH _raw_performance AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`staging`.`stg_meta_campaign_stats`\n),\n\n_raw_unique_campaigns AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_meta_unique_campaigns`\n),\n\n_rename_join_column AS(\n    SELECT \n        * EXCEPT (Campaign),\n        Campaign as CampaignJoin\n    FROM _raw_unique_campaigns\n),\n\n_joined AS(\n    SELECT * FROM _rename_join_column\n    INNER JOIN _raw_performance\n    ON _rename_join_column.CampaignJoin = _raw_performance.Campaign\n),\n\n_final AS(\n    SELECT * EXCEPT (CampaignJoin)\n    FROM _joined\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.int_meta_unique_campaigns": {"database": "oss-big-query-dashboard-prod", "schema": "intermediate", "name": "int_meta_unique_campaigns", "resource_type": "model", "package_name": "bq_evo", "path": "intermediate\\meta\\int_meta_unique_campaigns.sql", "original_file_path": "models\\intermediate\\meta\\int_meta_unique_campaigns.sql", "unique_id": "model.bq_evo.int_meta_unique_campaigns", "fqn": ["bq_evo", "intermediate", "meta", "int_meta_unique_campaigns"], "alias": "int_meta_unique_campaigns", "checksum": {"name": "sha256", "checksum": "5af5105e7325efe9239c2d93cffadf953e789ba8434e25161a74b01d5d38fe04"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt eine \u00dcbersicht aller Kampagnen ohne historische Informationen. Dient als einfache Datenbank der wichtigsten Metainfos der Kampagnen. Jede Kampagne hat genau einen Eintrag.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\intermediate\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "intermediate"}, "created_at": 1696938456.1473234, "relation_name": "`oss-big-query-dashboard-prod`.`intermediate`.`int_meta_unique_campaigns`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ ref('stg_meta_campaign_information')}}\r\n),\r\n\r\n_distinct_campaigns AS(\r\n    SELECT\r\n        MAX(Campaign) as Campaign,\r\n        MAX(Source) as Source,\r\n        MAX(Medium) as Medium,\r\n        MAX(Partner) as Partner,\r\n        CampaignID\r\n    FROM _raw\r\n    GROUP BY 5\r\n),\r\n\r\n_final AS(\r\n    SELECT * \r\n    FROM _distinct_campaigns\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "stg_meta_campaign_information", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.stg_meta_campaign_information"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\meta\\int_meta_unique_campaigns.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`staging`.`stg_meta_campaign_information`\n),\n\n_distinct_campaigns AS(\n    SELECT\n        MAX(Campaign) as Campaign,\n        MAX(Source) as Source,\n        MAX(Medium) as Medium,\n        MAX(Partner) as Partner,\n        CampaignID\n    FROM _raw\n    GROUP BY 5\n),\n\n_final AS(\n    SELECT * \n    FROM _distinct_campaigns\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.mrt_metainformation_campaigns": {"database": "oss-big-query-dashboard-prod", "schema": "mart", "name": "mrt_metainformation_campaigns", "resource_type": "model", "package_name": "bq_evo", "path": "mart\\multi_source_data\\mrt_metainformation_campaigns.sql", "original_file_path": "models\\mart\\multi_source_data\\mrt_metainformation_campaigns.sql", "unique_id": "model.bq_evo.mrt_metainformation_campaigns", "fqn": ["bq_evo", "mart", "multi_source_data", "mrt_metainformation_campaigns"], "alias": "mrt_metainformation_campaigns", "checksum": {"name": "sha256", "checksum": "0a8c09ab1d0205640fb8d603407905279808602e085894f4f01b33764dbab58b"}, "config": {"enabled": true, "alias": null, "schema": "mart", "database": null, "tags": ["performancereporting", "vermarktungsdashboard"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["performancereporting", "vermarktungsdashboard"], "description": "Enth\u00e4lt Kampagnen aus allen Quelldatensystemen mit Metainformationen.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IsPaid": {"name": "IsPaid", "description": "true = bezahlte Kampagne", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\mart\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "mart", "tags": ["performancereporting", "vermarktungsdashboard"]}, "created_at": 1696938456.1652215, "relation_name": "`oss-big-query-dashboard-prod`.`mart`.`mrt_metainformation_campaigns`", "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    tags=[\"performancereporting\", \"vermarktungsdashboard\"]\r\n    )\r\n}}\r\n\r\nWITH _googleads_campaigns AS(\r\n    SELECT\r\n        campaign as Campaign,\r\n        Medium,\r\n        Partner,\r\n        Source,\r\n        'true' as IsPaid,\r\n        CampaignID\r\n    FROM {{ ref('int_google_ads_unique_campaigns')}}\r\n),\r\n\r\n_google_analytics_campaigns AS(\r\n    SELECT\r\n        Campaign,\r\n        Medium,\r\n        Partner,\r\n        Source,\r\n        CASE\r\n            WHEN Medium IN ('cpc', 'ppc','cpa', 'cpm', 'cpv', 'cpp') THEN 'true' \r\n            ELSE 'false'\r\n        END as IsPaid,\r\n        CampaignID\r\n    FROM {{ ref('int_google_analytics_all_campaigns')}}\r\n),\r\n\r\n_bingads_campaigns AS(\r\n    SELECT\r\n        Campaign,\r\n        Medium,\r\n        Partner,\r\n        Source,\r\n        'true' as IsPaid,\r\n        CampaignID\r\n    FROM {{ ref('int_bing_ads_unique_campaigns')}}\r\n),\r\n\r\n_linkedin_campaigns AS(\r\n    SELECT\r\n        Campaign,\r\n        Medium,\r\n        Partner,\r\n        Source,\r\n        'true' as IsPaid,\r\n        CampaignID\r\n    FROM {{ ref('int_linkedin_unique_campaigns_reduced_information')}}\r\n),\r\n\r\n\r\n_merged_googleads_and_analytics AS(\r\n    SELECT * FROM _googleads_campaigns\r\n    UNION ALL\r\n    SELECT * FROM _google_analytics_campaigns\r\n),\r\n\r\n_merged_bingads AS(\r\n    SELECT * FROM _merged_googleads_and_analytics\r\n    UNION ALL\r\n    SELECT * FROM _bingads_campaigns    \r\n),\r\n\r\n_merged_linkedin AS(\r\n    SELECT * FROM _merged_bingads\r\n    UNION ALL\r\n    SELECT * FROM _linkedin_campaigns    \r\n),\r\n\r\n_final AS(\r\n    SELECT \r\n        DISTINCT *\r\n    FROM _merged_linkedin\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "int_google_ads_unique_campaigns", "package": null, "version": null}, {"name": "int_google_analytics_all_campaigns", "package": null, "version": null}, {"name": "int_bing_ads_unique_campaigns", "package": null, "version": null}, {"name": "int_linkedin_unique_campaigns_reduced_information", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.int_google_ads_unique_campaigns", "model.bq_evo.int_google_analytics_all_campaigns", "model.bq_evo.int_bing_ads_unique_campaigns", "model.bq_evo.int_linkedin_unique_campaigns_reduced_information"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\multi_source_data\\mrt_metainformation_campaigns.sql", "compiled": true, "compiled_code": "\n\nWITH _googleads_campaigns AS(\n    SELECT\n        campaign as Campaign,\n        Medium,\n        Partner,\n        Source,\n        'true' as IsPaid,\n        CampaignID\n    FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_google_ads_unique_campaigns`\n),\n\n_google_analytics_campaigns AS(\n    SELECT\n        Campaign,\n        Medium,\n        Partner,\n        Source,\n        CASE\n            WHEN Medium IN ('cpc', 'ppc','cpa', 'cpm', 'cpv', 'cpp') THEN 'true' \n            ELSE 'false'\n        END as IsPaid,\n        CampaignID\n    FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_all_campaigns`\n),\n\n_bingads_campaigns AS(\n    SELECT\n        Campaign,\n        Medium,\n        Partner,\n        Source,\n        'true' as IsPaid,\n        CampaignID\n    FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_bing_ads_unique_campaigns`\n),\n\n_linkedin_campaigns AS(\n    SELECT\n        Campaign,\n        Medium,\n        Partner,\n        Source,\n        'true' as IsPaid,\n        CampaignID\n    FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_linkedin_unique_campaigns_reduced_information`\n),\n\n\n_merged_googleads_and_analytics AS(\n    SELECT * FROM _googleads_campaigns\n    UNION ALL\n    SELECT * FROM _google_analytics_campaigns\n),\n\n_merged_bingads AS(\n    SELECT * FROM _merged_googleads_and_analytics\n    UNION ALL\n    SELECT * FROM _bingads_campaigns    \n),\n\n_merged_linkedin AS(\n    SELECT * FROM _merged_bingads\n    UNION ALL\n    SELECT * FROM _linkedin_campaigns    \n),\n\n_final AS(\n    SELECT \n        DISTINCT *\n    FROM _merged_linkedin\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.mrt_bing_ads_basic_campaign_stats": {"database": "oss-big-query-dashboard-prod", "schema": "mart", "name": "mrt_bing_ads_basic_campaign_stats", "resource_type": "model", "package_name": "bq_evo", "path": "mart\\single_source_data\\bing_ads\\mrt_bing_ads_basic_campaign_stats.sql", "original_file_path": "models\\mart\\single_source_data\\bing_ads\\mrt_bing_ads_basic_campaign_stats.sql", "unique_id": "model.bq_evo.mrt_bing_ads_basic_campaign_stats", "fqn": ["bq_evo", "mart", "single_source_data", "bing_ads", "mrt_bing_ads_basic_campaign_stats"], "alias": "mrt_bing_ads_basic_campaign_stats", "checksum": {"name": "sha256", "checksum": "4a1e0d0dd427aa3227f0dd083ca4fffa2dba3cc7abdd954809e9062ab6d23aaa"}, "config": {"enabled": true, "alias": null, "schema": "mart", "database": null, "tags": ["performancereporting", "vermarktungsdashboard", "bing ads"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["Date", "Campaign"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["performancereporting", "vermarktungsdashboard", "bing ads"], "description": "Enth\u00e4lt alle Vermarktungsstatistiken f\u00fcr das Performancereporting. Enth\u00e4lt jedoch keine Conversioninformationen.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "Keyword": {"name": "Keyword", "description": "Aufgrund enormer Speicherauswirkungen wird die Spalte aus den Datenquellen nicht bezogen. Enth\u00e4lt daher zum Status-Quo keine Informationen (19.09.2023).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "KeywordMatchType": {"name": "KeywordMatchType", "description": "Aufgrund enormer Speicherauswirkungen wird die Spalte aus den Datenquellen nicht bezogen. Enth\u00e4lt daher zum Status-Quo keine Informationen (19.09.2023).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\mart\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "mart", "unique_key": ["Date", "Campaign"], "on_schema_change": "sync_all_columns", "tags": ["performancereporting", "vermarktungsdashboard", "bing ads"]}, "created_at": 1696938456.162221, "relation_name": "`oss-big-query-dashboard-prod`.`mart`.`mrt_bing_ads_basic_campaign_stats`", "raw_code": "{{\r\n  config(\r\n    unique_key=['Date', 'Campaign'],\r\n    on_schema_change='sync_all_columns',\r\n    tags=[\"performancereporting\", \"vermarktungsdashboard\", \"bing ads\"]\r\n    )\r\n}}\r\n\r\nWITH _raw AS(\r\n  SELECT *\r\n  FROM {{ ref('int_bing_ads_campaign_performance_joined_campaign_names')}}\r\n \r\n    {% if is_incremental() %}\r\n\r\n      WHERE\r\n      --Update table for the past seven days + today\r\n      Date >= current_date()-7\r\n        \r\n    {% endif %}\r\n),\r\n\r\n_selected_columns AS(\r\n  SELECT \r\n    Date,\r\n    Campaign,\r\n    \r\n    CampaignID,\r\n    Source,\r\n    Medium,\r\n    Partner,\r\n    '(not set)' as Keyword,\r\n    '(not set)' as KeywordMatchType,\r\n    \r\n    Impressions,\r\n    Clicks,\r\n    Cost\r\n\r\n  FROM _raw\r\n),\r\n\r\n_final_aggregation AS(\r\n  SELECT \r\n    Date,\r\n    Campaign,\r\n    \r\n    MAX(CampaignID) as CampaignID,\r\n    MAX(Source) as Source,\r\n    MAX(Medium) as Medium,\r\n    MAX(Partner) as Partner,\r\n    MAX(Keyword) as Keyword,\r\n    MAX(KeywordMatchType) as KeywordMatchType,\r\n    \r\n    SUM(Impressions) as Impressions,\r\n    SUM(Clicks) as Clicks,\r\n    SUM(Cost) as Cost\r\n\r\n  FROM _selected_columns\r\n  GROUP BY 1,2\r\n)\r\n\r\nSELECT * FROM _final_aggregation", "language": "sql", "refs": [{"name": "int_bing_ads_campaign_performance_joined_campaign_names", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.bq_evo.int_bing_ads_campaign_performance_joined_campaign_names"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\single_source_data\\bing_ads\\mrt_bing_ads_basic_campaign_stats.sql", "compiled": true, "compiled_code": "\n\nWITH _raw AS(\n  SELECT *\n  FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_bing_ads_campaign_performance_joined_campaign_names`\n \n    \n\n      WHERE\n      --Update table for the past seven days + today\n      Date >= current_date()-7\n        \n    \n),\n\n_selected_columns AS(\n  SELECT \n    Date,\n    Campaign,\n    \n    CampaignID,\n    Source,\n    Medium,\n    Partner,\n    '(not set)' as Keyword,\n    '(not set)' as KeywordMatchType,\n    \n    Impressions,\n    Clicks,\n    Cost\n\n  FROM _raw\n),\n\n_final_aggregation AS(\n  SELECT \n    Date,\n    Campaign,\n    \n    MAX(CampaignID) as CampaignID,\n    MAX(Source) as Source,\n    MAX(Medium) as Medium,\n    MAX(Partner) as Partner,\n    MAX(Keyword) as Keyword,\n    MAX(KeywordMatchType) as KeywordMatchType,\n    \n    SUM(Impressions) as Impressions,\n    SUM(Clicks) as Clicks,\n    SUM(Cost) as Cost\n\n  FROM _selected_columns\n  GROUP BY 1,2\n)\n\nSELECT * FROM _final_aggregation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.mrt_google_ads_basic_campaign_stats": {"database": "oss-big-query-dashboard-prod", "schema": "mart", "name": "mrt_google_ads_basic_campaign_stats", "resource_type": "model", "package_name": "bq_evo", "path": "mart\\single_source_data\\google_ads\\mrt_google_ads_basic_campaign_stats.sql", "original_file_path": "models\\mart\\single_source_data\\google_ads\\mrt_google_ads_basic_campaign_stats.sql", "unique_id": "model.bq_evo.mrt_google_ads_basic_campaign_stats", "fqn": ["bq_evo", "mart", "single_source_data", "google_ads", "mrt_google_ads_basic_campaign_stats"], "alias": "mrt_google_ads_basic_campaign_stats", "checksum": {"name": "sha256", "checksum": "d8a6f71fbc60f97fca0a277302601ac1d0174851c84a1b1e05af949f1d5fc06e"}, "config": {"enabled": true, "alias": null, "schema": "mart", "database": null, "tags": ["performancereporting", "vermarktungsdashboard", "google ads"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["date", "Campaign"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["performancereporting", "vermarktungsdashboard", "google ads"], "description": "Enth\u00e4lt alle Vermarktungsstatistiken f\u00fcr das Performancereporting. Enth\u00e4lt jedoch keine Conversioninformationen.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "Keyword": {"name": "Keyword", "description": "Aufgrund enormer Speicherauswirkungen wird die Spalte aus den Datenquellen nicht bezogen. Enth\u00e4lt daher zum Status-Quo keine Informationen (19.09.2023).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "KeywordMatchType": {"name": "KeywordMatchType", "description": "Aufgrund enormer Speicherauswirkungen wird die Spalte aus den Datenquellen nicht bezogen. Enth\u00e4lt daher zum Status-Quo keine Informationen (19.09.2023).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\mart\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "mart", "unique_key": ["date", "Campaign"], "on_schema_change": "sync_all_columns", "tags": ["performancereporting", "vermarktungsdashboard", "google ads"]}, "created_at": 1696938456.162221, "relation_name": "`oss-big-query-dashboard-prod`.`mart`.`mrt_google_ads_basic_campaign_stats`", "raw_code": "{{\r\n  config(\r\n    unique_key=['date', 'Campaign'],\r\n    on_schema_change='sync_all_columns',\r\n    tags=[\"performancereporting\", \"vermarktungsdashboard\", \"google ads\"]\r\n    )\r\n}}\r\n\r\nWITH _raw AS(\r\n  SELECT *\r\n  FROM {{ ref('int_google_ads_campaign_stats')}}\r\n\r\n    {% if is_incremental() %}\r\n\r\n      WHERE\r\n      --Update table for the past seven days + today\r\n      date >= current_date()-7\r\n        \r\n    {% endif %}\r\n),\r\n\r\n_selected_columns AS(\r\n  SELECT \r\n    date as Date,\r\n    Campaign,\r\n    \r\n    CampaignID,\r\n    Source,\r\n    Medium,\r\n    Partner,\r\n    '(not set)' as Keyword,\r\n    '(not set)' as KeywordMatchType,\r\n    \r\n    impressions as Impressions,\r\n    clicks as Clicks,\r\n    cost as Cost\r\n\r\n  FROM _raw\r\n),\r\n\r\n_final_aggregation AS(\r\n  SELECT \r\n    Date,\r\n    Campaign,\r\n    \r\n    MAX(CampaignID) as CampaignID,\r\n    MAX(Source) as Source,\r\n    MAX(Medium) as Medium,\r\n    MAX(Partner) as Partner,\r\n    MAX(Keyword) as Keyword,\r\n    MAX(KeywordMatchType) as KeywordMatchType,\r\n    \r\n    SUM(Impressions) as Impressions,\r\n    SUM(Clicks) as Clicks,\r\n    SUM(Cost) as Cost\r\n\r\n  FROM _selected_columns\r\n  GROUP BY 1,2\r\n)\r\n\r\nSELECT * FROM _final_aggregation", "language": "sql", "refs": [{"name": "int_google_ads_campaign_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.bq_evo.int_google_ads_campaign_stats"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\single_source_data\\google_ads\\mrt_google_ads_basic_campaign_stats.sql", "compiled": true, "compiled_code": "\n\nWITH _raw AS(\n  SELECT *\n  FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_google_ads_campaign_stats`\n\n    \n\n      WHERE\n      --Update table for the past seven days + today\n      date >= current_date()-7\n        \n    \n),\n\n_selected_columns AS(\n  SELECT \n    date as Date,\n    Campaign,\n    \n    CampaignID,\n    Source,\n    Medium,\n    Partner,\n    '(not set)' as Keyword,\n    '(not set)' as KeywordMatchType,\n    \n    impressions as Impressions,\n    clicks as Clicks,\n    cost as Cost\n\n  FROM _raw\n),\n\n_final_aggregation AS(\n  SELECT \n    Date,\n    Campaign,\n    \n    MAX(CampaignID) as CampaignID,\n    MAX(Source) as Source,\n    MAX(Medium) as Medium,\n    MAX(Partner) as Partner,\n    MAX(Keyword) as Keyword,\n    MAX(KeywordMatchType) as KeywordMatchType,\n    \n    SUM(Impressions) as Impressions,\n    SUM(Clicks) as Clicks,\n    SUM(Cost) as Cost\n\n  FROM _selected_columns\n  GROUP BY 1,2\n)\n\nSELECT * FROM _final_aggregation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.mrt_google_analytics_campaign_webperformance": {"database": "oss-big-query-dashboard-prod", "schema": "mart", "name": "mrt_google_analytics_campaign_webperformance", "resource_type": "model", "package_name": "bq_evo", "path": "mart\\single_source_data\\google_analytics\\mrt_google_analytics_campaign_webperformance.sql", "original_file_path": "models\\mart\\single_source_data\\google_analytics\\mrt_google_analytics_campaign_webperformance.sql", "unique_id": "model.bq_evo.mrt_google_analytics_campaign_webperformance", "fqn": ["bq_evo", "mart", "single_source_data", "google_analytics", "mrt_google_analytics_campaign_webperformance"], "alias": "mrt_google_analytics_campaign_webperformance", "checksum": {"name": "sha256", "checksum": "5d33e28ecee1276e1b5c2f938c3786e9e1f9201d12d8d31d6f039f7c30b0243b"}, "config": {"enabled": true, "alias": null, "schema": "mart", "database": null, "tags": ["performancereporting", "vermarktungsdashboard", "google analytics"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["Date", "CampaignID"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["performancereporting", "vermarktungsdashboard", "google analytics"], "description": "Enth\u00e4lt grundlegende Web-Performancewerte aller \u00fcber GA4 erfassten Kampagnen.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\mart\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "mart", "unique_key": ["Date", "CampaignID"], "on_schema_change": "sync_all_columns", "tags": ["performancereporting", "vermarktungsdashboard", "google analytics"]}, "created_at": 1696938456.1632228, "relation_name": "`oss-big-query-dashboard-prod`.`mart`.`mrt_google_analytics_campaign_webperformance`", "raw_code": "{{\r\n  config(\r\n    unique_key=['Date', 'CampaignID'],\r\n    on_schema_change='sync_all_columns',\r\n    tags=[\"performancereporting\", \"vermarktungsdashboard\", \"google analytics\"]\r\n    )\r\n}}\r\n\r\nWITH _raw AS(\r\n    SELECT *\r\n    FROM {{ ref('int_google_analytics_all_events')}}\r\n\r\n    {% if is_incremental() %}\r\n\r\n      WHERE\r\n      --Update table for the past seven days + today\r\n      event_date >= current_date()-7\r\n        \r\n    {% endif %}\r\n),\r\n\r\nsessions_by_campaign AS(\r\n  SELECT\r\n    event_date as Date,\r\n    CampaignID,\r\n\r\n    COUNT(DISTINCT(CONCAT(user_pseudo_id,session_id))) as Sessions,\r\n    COUNT(DISTINCT \r\n      CASE \r\n        WHEN session_engaged = '1' THEN CONCAT(user_pseudo_id,session_id) \r\n      END) as Sessions_Engaged,\r\n    MAX(Medium) as Medium,\r\n    MAX(Source) as Source,\r\n    MAX(Partner) as Partner,\r\n\r\n  FROM _raw\r\n  GROUP BY 1,2\r\n),\r\n\r\n_add_engagement_rate AS(\r\n    SELECT \r\n        Date,\r\n        CampaignID,\r\n        Sessions,\r\n        Sessions_Engaged,\r\n        (CASE\r\n            WHEN Sessions > 0 THEN (Sessions_Engaged / Sessions) \r\n            ELSE 0\r\n        END) as Engagement_Rate,\r\n        Medium,\r\n        Source,\r\n        Partner\r\n    FROM sessions_by_campaign\r\n),\r\n\r\n_added_columns AS(\r\n    SELECT\r\n        *,\r\n        '(not set)' as Keyword,\r\n        '(not set)' as KeywordMatchType\r\n    FROM _add_engagement_rate\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _added_columns\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "int_google_analytics_all_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.bq_evo.int_google_analytics_all_events"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\single_source_data\\google_analytics\\mrt_google_analytics_campaign_webperformance.sql", "compiled": true, "compiled_code": "\n\nWITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_all_events`\n\n    \n\n      WHERE\n      --Update table for the past seven days + today\n      event_date >= current_date()-7\n        \n    \n),\n\nsessions_by_campaign AS(\n  SELECT\n    event_date as Date,\n    CampaignID,\n\n    COUNT(DISTINCT(CONCAT(user_pseudo_id,session_id))) as Sessions,\n    COUNT(DISTINCT \n      CASE \n        WHEN session_engaged = '1' THEN CONCAT(user_pseudo_id,session_id) \n      END) as Sessions_Engaged,\n    MAX(Medium) as Medium,\n    MAX(Source) as Source,\n    MAX(Partner) as Partner,\n\n  FROM _raw\n  GROUP BY 1,2\n),\n\n_add_engagement_rate AS(\n    SELECT \n        Date,\n        CampaignID,\n        Sessions,\n        Sessions_Engaged,\n        (CASE\n            WHEN Sessions > 0 THEN (Sessions_Engaged / Sessions) \n            ELSE 0\n        END) as Engagement_Rate,\n        Medium,\n        Source,\n        Partner\n    FROM sessions_by_campaign\n),\n\n_added_columns AS(\n    SELECT\n        *,\n        '(not set)' as Keyword,\n        '(not set)' as KeywordMatchType\n    FROM _add_engagement_rate\n),\n\n_final AS(\n    SELECT *\n    FROM _added_columns\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.mrt_google_analytics_merged_ua_ga4_transactions_summarized": {"database": "oss-big-query-dashboard-prod", "schema": "mart", "name": "mrt_google_analytics_merged_ua_ga4_transactions_summarized", "resource_type": "model", "package_name": "bq_evo", "path": "mart\\single_source_data\\google_analytics\\mrt_google_analytics_merged_ua_ga4_transactions_summarized.sql", "original_file_path": "models\\mart\\single_source_data\\google_analytics\\mrt_google_analytics_merged_ua_ga4_transactions_summarized.sql", "unique_id": "model.bq_evo.mrt_google_analytics_merged_ua_ga4_transactions_summarized", "fqn": ["bq_evo", "mart", "single_source_data", "google_analytics", "mrt_google_analytics_merged_ua_ga4_transactions_summarized"], "alias": "mrt_google_analytics_merged_ua_ga4_transactions_summarized", "checksum": {"name": "sha256", "checksum": "8cd906ca98c355fa62b1e0a7ff8a151ce10cce7aa4dbf37257128c6d3affb762"}, "config": {"enabled": true, "alias": null, "schema": "mart", "database": null, "tags": ["performancereporting", "vermarktungsdashboard", "google analytics"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["performancereporting", "vermarktungsdashboard", "google analytics"], "description": "Enth\u00e4lt alle aggregierten Transaktionen bis einschl. 04.06.2023 aus Unisversal Analytics, alle Conversions ab 05.06.2023 aus Google Analytics 4. Enth\u00e4lt keine Detailinformationen je Transaktion.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "Keyword": {"name": "Keyword", "description": "Aufgrund enormer Speicherauswirkungen wird die Spalte aus den Datenquellen nicht bezogen. Enth\u00e4lt daher zum Status-Quo keine Informationen (19.09.2023).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "KeywordMatchType": {"name": "KeywordMatchType", "description": "Aufgrund enormer Speicherauswirkungen wird die Spalte aus den Datenquellen nicht bezogen. Enth\u00e4lt daher zum Status-Quo keine Informationen (19.09.2023).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\mart\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "mart", "tags": ["performancereporting", "vermarktungsdashboard", "google analytics"]}, "created_at": 1696938456.1632228, "relation_name": "`oss-big-query-dashboard-prod`.`mart`.`mrt_google_analytics_merged_ua_ga4_transactions_summarized`", "raw_code": "{{ config(\r\n    tags=[\"performancereporting\", \"vermarktungsdashboard\", \"google analytics\"]\r\n) }}\r\n\r\nWITH _raw AS(\r\n  SELECT \r\n    event_date as Date,\r\n    Campaign,\r\n    Medium,\r\n    Source,\r\n    item_category as ProductCategory,\r\n    '(not set)' as Keyword,\r\n    '(not set)' as KeywordMatchType,\r\n    Partner,\r\n    CampaignID\r\n  FROM {{ ref('int_google_analytics_all_purchases_GA4')}}\r\n  WHERE \r\n    transaction_id NOT LIKE 'TEST%'\r\n),\r\n\r\n_aggregation_on_day AS(\r\n  SELECT\r\n    Date,\r\n    Campaign,\r\n    Medium,\r\n    Source,\r\n    ProductCategory,\r\n    count(Date) as Transactions,\r\n    MAX(Keyword) as Keyword,\r\n    MAX(KeywordMatchType) as KeywordMatchType,\r\n    MAX(Partner) as Partner,\r\n    CampaignID\r\n  FROM _raw\r\n  WHERE Date >= '2023-06-05'\r\n  GROUP BY 1,2,3,4,5,10\r\n),\r\n\r\nevo_ecommerce_ua AS(\r\n  SELECT *\r\n  FROM {{ ref('stg_google_analytics_historic_transactions')}}\r\n  WHERE Date < '2023-06-05'\r\n),\r\n\r\n_merged_step1 AS(\r\n  SELECT * FROM _aggregation_on_day\r\n  UNION ALL\r\n  SELECT * FROM evo_ecommerce_ua\r\n),\r\n\r\n_final AS(\r\n  SELECT * FROM _merged_step1\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "int_google_analytics_all_purchases_GA4", "package": null, "version": null}, {"name": "stg_google_analytics_historic_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.int_google_analytics_all_purchases_GA4", "model.bq_evo.stg_google_analytics_historic_transactions"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\single_source_data\\google_analytics\\mrt_google_analytics_merged_ua_ga4_transactions_summarized.sql", "compiled": true, "compiled_code": "\n\nWITH _raw AS(\n  SELECT \n    event_date as Date,\n    Campaign,\n    Medium,\n    Source,\n    item_category as ProductCategory,\n    '(not set)' as Keyword,\n    '(not set)' as KeywordMatchType,\n    Partner,\n    CampaignID\n  FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_all_purchases_GA4`\n  WHERE \n    transaction_id NOT LIKE 'TEST%'\n),\n\n_aggregation_on_day AS(\n  SELECT\n    Date,\n    Campaign,\n    Medium,\n    Source,\n    ProductCategory,\n    count(Date) as Transactions,\n    MAX(Keyword) as Keyword,\n    MAX(KeywordMatchType) as KeywordMatchType,\n    MAX(Partner) as Partner,\n    CampaignID\n  FROM _raw\n  WHERE Date >= '2023-06-05'\n  GROUP BY 1,2,3,4,5,10\n),\n\nevo_ecommerce_ua AS(\n  SELECT *\n  FROM `oss-big-query-dashboard-prod`.`staging`.`stg_google_analytics_historic_transactions`\n  WHERE Date < '2023-06-05'\n),\n\n_merged_step1 AS(\n  SELECT * FROM _aggregation_on_day\n  UNION ALL\n  SELECT * FROM evo_ecommerce_ua\n),\n\n_final AS(\n  SELECT * FROM _merged_step1\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized": {"database": "oss-big-query-dashboard-prod", "schema": "mart", "name": "mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized", "resource_type": "model", "package_name": "bq_evo", "path": "mart\\single_source_data\\google_analytics\\mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized.sql", "original_file_path": "models\\mart\\single_source_data\\google_analytics\\mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized.sql", "unique_id": "model.bq_evo.mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized", "fqn": ["bq_evo", "mart", "single_source_data", "google_analytics", "mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized"], "alias": "mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized", "checksum": {"name": "sha256", "checksum": "c3e5de64d6f485cb6d2d0b387e2e25db4b461de5a013351dd6f75dc899a52a88"}, "config": {"enabled": true, "alias": null, "schema": "mart", "database": null, "tags": ["performancereporting", "vermarktungsdashboard", "google analytics"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["performancereporting", "vermarktungsdashboard", "google analytics"], "description": "Enth\u00e4lt alle Conversiondaten bis einschl. 04.06.2023 aus Unisversal Analytics, alle Conversions ab 05.06.2023 aus Google Analytics 4.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "Keyword": {"name": "Keyword", "description": "Aufgrund enormer Speicherauswirkungen wird die Spalte aus den Datenquellen nicht bezogen. Enth\u00e4lt daher zum Status-Quo keine Informationen (19.09.2023).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "KeywordMatchType": {"name": "KeywordMatchType", "description": "Aufgrund enormer Speicherauswirkungen wird die Spalte aus den Datenquellen nicht bezogen. Enth\u00e4lt daher zum Status-Quo keine Informationen (19.09.2023).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\mart\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "mart", "tags": ["performancereporting", "vermarktungsdashboard", "google analytics"]}, "created_at": 1696938456.1632228, "relation_name": "`oss-big-query-dashboard-prod`.`mart`.`mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized`", "raw_code": "{{ config(\r\n    tags=[\"performancereporting\", \"vermarktungsdashboard\", \"google analytics\"]\r\n) }}\r\n\r\nWITH ga4_conversions AS(\r\n    SELECT *\r\n    FROM {{ ref('int_google_analytics_NDG_conversionevents_GA4')}}\r\n    WHERE \r\n        Date > '2023-06-04'\r\n),\r\n\r\nua_conversions AS(\r\n    SELECT\r\n        Date,\r\n        NameZielvorhaben as ZielvorhabenName,\r\n        LOWER(CONCAT(NameZielvorhaben, Partner)) as ZielvorhabenID,\r\n        CampaignID,\r\n        Source,\r\n        Medium,\r\n        Partner,\r\n        Keyword,\r\n        KeywordMatchType,\r\n        Conversions\r\n    FROM {{ ref('stg_google_analytics_historic_goal_conversions')}}\r\n    WHERE Date <= '2023-06-04'\r\n),\r\n\r\n_merged_step1 AS(\r\n    SELECT * FROM ga4_conversions\r\n    UNION ALL\r\n    SELECT * FROM ua_conversions\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _merged_step1\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [{"name": "int_google_analytics_NDG_conversionevents_GA4", "package": null, "version": null}, {"name": "stg_google_analytics_historic_goal_conversions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bq_evo.int_google_analytics_NDG_conversionevents_GA4", "model.bq_evo.stg_google_analytics_historic_goal_conversions"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\single_source_data\\google_analytics\\mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized.sql", "compiled": true, "compiled_code": "\n\nWITH ga4_conversions AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_NDG_conversionevents_GA4`\n    WHERE \n        Date > '2023-06-04'\n),\n\nua_conversions AS(\n    SELECT\n        Date,\n        NameZielvorhaben as ZielvorhabenName,\n        LOWER(CONCAT(NameZielvorhaben, Partner)) as ZielvorhabenID,\n        CampaignID,\n        Source,\n        Medium,\n        Partner,\n        Keyword,\n        KeywordMatchType,\n        Conversions\n    FROM `oss-big-query-dashboard-prod`.`staging`.`stg_google_analytics_historic_goal_conversions`\n    WHERE Date <= '2023-06-04'\n),\n\n_merged_step1 AS(\n    SELECT * FROM ga4_conversions\n    UNION ALL\n    SELECT * FROM ua_conversions\n),\n\n_final AS(\n    SELECT *\n    FROM _merged_step1\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.mrt_linkedin_basic_campaign_stats": {"database": "oss-big-query-dashboard-prod", "schema": "mart", "name": "mrt_linkedin_basic_campaign_stats", "resource_type": "model", "package_name": "bq_evo", "path": "mart\\single_source_data\\linkedin\\mrt_linkedin_basic_campaign_stats.sql", "original_file_path": "models\\mart\\single_source_data\\linkedin\\mrt_linkedin_basic_campaign_stats.sql", "unique_id": "model.bq_evo.mrt_linkedin_basic_campaign_stats", "fqn": ["bq_evo", "mart", "single_source_data", "linkedin", "mrt_linkedin_basic_campaign_stats"], "alias": "mrt_linkedin_basic_campaign_stats", "checksum": {"name": "sha256", "checksum": "1e1f63643a5637313f822ab3f256eee964458f30bda303cfaf0493ab9e8e9ba1"}, "config": {"enabled": true, "alias": null, "schema": "mart", "database": null, "tags": ["performancereporting", "linkedin", "vermarktungsdashboard"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["Date", "Campaign"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["performancereporting", "linkedin", "vermarktungsdashboard"], "description": "Enth\u00e4lt alle Vermarktungsstatistiken f\u00fcr das Performancereporting. Enth\u00e4lt jedoch keine Conversioninformationen.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\mart\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "mart", "unique_key": ["Date", "Campaign"], "on_schema_change": "sync_all_columns", "tags": ["performancereporting", "linkedin", "vermarktungsdashboard"]}, "created_at": 1696938456.1642213, "relation_name": "`oss-big-query-dashboard-prod`.`mart`.`mrt_linkedin_basic_campaign_stats`", "raw_code": "{{\r\n  config(\r\n    unique_key=['Date', 'Campaign'],\r\n    on_schema_change='sync_all_columns',\r\n    tags=[\"performancereporting\", \"linkedin\", \"vermarktungsdashboard\"]\r\n    )\r\n}}\r\n\r\nWITH _raw AS(\r\n  SELECT *\r\n  FROM {{ ref('int_linkedin_campaign_stats_joined_campaign_names')}}\r\n\r\n    {% if is_incremental() %}\r\n\r\n      WHERE\r\n      --Update table for the past seven days + today\r\n      Date >= current_date()-7\r\n        \r\n    {% endif %}\r\n),\r\n\r\n_selected_columns AS(\r\n  SELECT \r\n    Date,\r\n    Campaign,\r\n    \r\n    CampaignID,\r\n    Source,\r\n    Medium,\r\n    Partner,\r\n    '(not set)' as Keyword,\r\n    '(not set)' as KeywordMatchType,\r\n    \r\n    Impressions,\r\n    Clicks,\r\n    Cost\r\n\r\n  FROM _raw\r\n),\r\n\r\n_final_aggregation AS(\r\n  SELECT \r\n    Date,\r\n    Campaign,\r\n    \r\n    MAX(CampaignID) as CampaignID,\r\n    MAX(Source) as Source,\r\n    MAX(Medium) as Medium,\r\n    MAX(Partner) as Partner,\r\n    MAX(Keyword) as Keyword,\r\n    MAX(KeywordMatchType) as KeywordMatchType,\r\n    \r\n    SUM(Impressions) as Impressions,\r\n    SUM(Clicks) as Clicks,\r\n    SUM(Cost) as Cost\r\n\r\n  FROM _selected_columns\r\n  GROUP BY 1,2\r\n)\r\n\r\nSELECT * FROM _final_aggregation", "language": "sql", "refs": [{"name": "int_linkedin_campaign_stats_joined_campaign_names", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.bq_evo.int_linkedin_campaign_stats_joined_campaign_names"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\single_source_data\\linkedin\\mrt_linkedin_basic_campaign_stats.sql", "compiled": true, "compiled_code": "\n\nWITH _raw AS(\n  SELECT *\n  FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_linkedin_campaign_stats_joined_campaign_names`\n\n    \n\n      WHERE\n      --Update table for the past seven days + today\n      Date >= current_date()-7\n        \n    \n),\n\n_selected_columns AS(\n  SELECT \n    Date,\n    Campaign,\n    \n    CampaignID,\n    Source,\n    Medium,\n    Partner,\n    '(not set)' as Keyword,\n    '(not set)' as KeywordMatchType,\n    \n    Impressions,\n    Clicks,\n    Cost\n\n  FROM _raw\n),\n\n_final_aggregation AS(\n  SELECT \n    Date,\n    Campaign,\n    \n    MAX(CampaignID) as CampaignID,\n    MAX(Source) as Source,\n    MAX(Medium) as Medium,\n    MAX(Partner) as Partner,\n    MAX(Keyword) as Keyword,\n    MAX(KeywordMatchType) as KeywordMatchType,\n    \n    SUM(Impressions) as Impressions,\n    SUM(Clicks) as Clicks,\n    SUM(Cost) as Cost\n\n  FROM _selected_columns\n  GROUP BY 1,2\n)\n\nSELECT * FROM _final_aggregation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.mrt_meta_basic_campaign_stats": {"database": "oss-big-query-dashboard-prod", "schema": "mart", "name": "mrt_meta_basic_campaign_stats", "resource_type": "model", "package_name": "bq_evo", "path": "mart\\single_source_data\\meta\\mrt_meta_basic_campaign_stats.sql", "original_file_path": "models\\mart\\single_source_data\\meta\\mrt_meta_basic_campaign_stats.sql", "unique_id": "model.bq_evo.mrt_meta_basic_campaign_stats", "fqn": ["bq_evo", "mart", "single_source_data", "meta", "mrt_meta_basic_campaign_stats"], "alias": "mrt_meta_basic_campaign_stats", "checksum": {"name": "sha256", "checksum": "a5065e8e22558330231c90b718dde9ad44cd317116311568926aa3e68e69b21b"}, "config": {"enabled": true, "alias": null, "schema": "mart", "database": null, "tags": ["performancereporting", "meta", "vermarktungsdashboard"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["Date", "Campaign"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["performancereporting", "meta", "vermarktungsdashboard"], "description": "Enth\u00e4lt alle Vermarktungsstatistiken f\u00fcr das Performancereporting. Enth\u00e4lt jedoch keine Conversioninformationen.", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\mart\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "mart", "unique_key": ["Date", "Campaign"], "on_schema_change": "sync_all_columns", "tags": ["performancereporting", "meta", "vermarktungsdashboard"]}, "created_at": 1696938456.1642213, "relation_name": "`oss-big-query-dashboard-prod`.`mart`.`mrt_meta_basic_campaign_stats`", "raw_code": "{{\r\n  config(\r\n    unique_key=['Date', 'Campaign'],\r\n    on_schema_change='sync_all_columns',\r\n    tags=[\"performancereporting\", \"meta\", \"vermarktungsdashboard\"]\r\n    )\r\n}}\r\n\r\nWITH _raw AS(\r\n  SELECT *\r\n  FROM {{ ref('int_meta_campaign_stats_joined_campaign_names')}}\r\n\r\n    {% if is_incremental() %}\r\n\r\n      WHERE\r\n      --Update table for the past seven days + today\r\n      date >= current_date()-7\r\n        \r\n    {% endif %}\r\n),\r\n\r\n_selected_columns AS(\r\n  SELECT \r\n    Date,\r\n    Campaign,   \r\n    CampaignID,\r\n    Source,\r\n    Medium,\r\n    Partner,\r\n    '(not set)' as Keyword,\r\n    '(not set)' as KeywordMatchType,\r\n    \r\n    Impressions,\r\n    Clicks,\r\n    Cost\r\n\r\n  FROM _raw\r\n),\r\n\r\n_final_aggregation AS(\r\n  SELECT \r\n    Date,\r\n    Campaign,\r\n    \r\n    MAX(CampaignID) as CampaignID,\r\n    MAX(Source) as Source,\r\n    MAX(Medium) as Medium,\r\n    MAX(Partner) as Partner,\r\n    MAX(Keyword) as Keyword,\r\n    MAX(KeywordMatchType) as KeywordMatchType,\r\n    \r\n    SUM(Impressions) as Impressions,\r\n    SUM(Clicks) as Clicks,\r\n    SUM(Cost) as Cost\r\n\r\n  FROM _selected_columns\r\n  GROUP BY 1,2\r\n)\r\n\r\nSELECT * FROM _final_aggregation", "language": "sql", "refs": [{"name": "int_meta_campaign_stats_joined_campaign_names", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.bq_evo.int_meta_campaign_stats_joined_campaign_names"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\single_source_data\\meta\\mrt_meta_basic_campaign_stats.sql", "compiled": true, "compiled_code": "\n\nWITH _raw AS(\n  SELECT *\n  FROM `oss-big-query-dashboard-prod`.`intermediate`.`int_meta_campaign_stats_joined_campaign_names`\n\n    \n\n      WHERE\n      --Update table for the past seven days + today\n      date >= current_date()-7\n        \n    \n),\n\n_selected_columns AS(\n  SELECT \n    Date,\n    Campaign,   \n    CampaignID,\n    Source,\n    Medium,\n    Partner,\n    '(not set)' as Keyword,\n    '(not set)' as KeywordMatchType,\n    \n    Impressions,\n    Clicks,\n    Cost\n\n  FROM _raw\n),\n\n_final_aggregation AS(\n  SELECT \n    Date,\n    Campaign,\n    \n    MAX(CampaignID) as CampaignID,\n    MAX(Source) as Source,\n    MAX(Medium) as Medium,\n    MAX(Partner) as Partner,\n    MAX(Keyword) as Keyword,\n    MAX(KeywordMatchType) as KeywordMatchType,\n    \n    SUM(Impressions) as Impressions,\n    SUM(Clicks) as Clicks,\n    SUM(Cost) as Cost\n\n  FROM _selected_columns\n  GROUP BY 1,2\n)\n\nSELECT * FROM _final_aggregation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.stg_bing_ads_campaign_history": {"database": "oss-big-query-dashboard-prod", "schema": "staging", "name": "stg_bing_ads_campaign_history", "resource_type": "model", "package_name": "bq_evo", "path": "staging\\bing_ads\\stg_bing_ads_campaign_history.sql", "original_file_path": "models\\staging\\bing_ads\\stg_bing_ads_campaign_history.sql", "unique_id": "model.bq_evo.stg_bing_ads_campaign_history", "fqn": ["bq_evo", "staging", "bing_ads", "stg_bing_ads_campaign_history"], "alias": "stg_bing_ads_campaign_history", "checksum": {"name": "sha256", "checksum": "bff132c80a4f125153658a7474d5a6bbe1992eb1b773123215e6fe2590cdcc09"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "\u00c4nderungshistorie der Kampagnen. Jede Kampagne kann mehrfach auftauchen.", "columns": {"id": {"name": "id", "description": "Kampagnen-ID Microsoft, wichtigster Sekund\u00e4rschl\u00fcssel", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "Partner": {"name": "Partner", "description": "Ist immer EVO, darf keine leeren Werte enthalten. Kann zuk\u00fcnftig zur Differenzierung mehrerer Marken genutzt werden.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "test": ["not_null"]}, "CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "test": ["not_null"]}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\staging\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "staging"}, "created_at": 1696938456.1788993, "relation_name": "`oss-big-query-dashboard-prod`.`staging`.`stg_bing_ads_campaign_history`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ source('bingads', 'campaign_history') }}\r\n),\r\n\r\n\r\n_added_columns AS (\r\n    SELECT\r\n        *,\r\n        'cpc' as Medium,\r\n        'bing' as Source,\r\n        (CASE \r\n            WHEN account_id = 156001989 THEN 'EVO'\r\n        END) as Partner,\r\n    FROM _raw\r\n),\r\n\r\n_added_campaignid AS (\r\n    SELECT \r\n        *,\r\n        LOWER (CONCAT(name, Source, Medium, Partner)) as CampaignID\r\n    FROM _added_columns\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _added_campaignid\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [], "sources": [["bingads", "campaign_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bq_evo.bingads.campaign_history"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\bing_ads\\stg_bing_ads_campaign_history.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`bingads`.`campaign_history`\n),\n\n\n_added_columns AS (\n    SELECT\n        *,\n        'cpc' as Medium,\n        'bing' as Source,\n        (CASE \n            WHEN account_id = 156001989 THEN 'EVO'\n        END) as Partner,\n    FROM _raw\n),\n\n_added_campaignid AS (\n    SELECT \n        *,\n        LOWER (CONCAT(name, Source, Medium, Partner)) as CampaignID\n    FROM _added_columns\n),\n\n_final AS(\n    SELECT *\n    FROM _added_campaignid\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.stg_bing_ads_campaign_performance_daily_report": {"database": "oss-big-query-dashboard-prod", "schema": "staging", "name": "stg_bing_ads_campaign_performance_daily_report", "resource_type": "model", "package_name": "bq_evo", "path": "staging\\bing_ads\\stg_bing_ads_campaign_performance_daily_report.sql", "original_file_path": "models\\staging\\bing_ads\\stg_bing_ads_campaign_performance_daily_report.sql", "unique_id": "model.bq_evo.stg_bing_ads_campaign_performance_daily_report", "fqn": ["bq_evo", "staging", "bing_ads", "stg_bing_ads_campaign_performance_daily_report"], "alias": "stg_bing_ads_campaign_performance_daily_report", "checksum": {"name": "sha256", "checksum": "6e3939c71d1f61d4e9c47e739898ad02f4928876b413f99ac7a52e826ba3ae1a"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "staging"}, "created_at": 1696938456.1096036, "relation_name": "`oss-big-query-dashboard-prod`.`staging`.`stg_bing_ads_campaign_performance_daily_report`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ source('bingads', 'campaign_performance_daily_report') }}\r\n),\r\n\r\n_renamed_columns AS(\r\n    SELECT \r\n        _fivetran_id,\r\n        _fivetran_synced,\r\n        account_id,\r\n        ad_distribution,\r\n        ad_relevance,\r\n        all_conversions,\r\n        all_conversions_qualified,\r\n        all_return_on_ad_spend,\r\n        all_revenue,\r\n        assists,\r\n        average_cpc,\r\n        average_position,\r\n        bid_match_type,\r\n        budget_association_status,\r\n        campaign_id,\r\n        campaign_name,\r\n        campaign_status,\r\n        clicks as Clicks,\r\n        conversions,\r\n        conversions_qualified,\r\n        ctr,\r\n        currency_code,\r\n        date as Date,\r\n        delivered_match_type,\r\n        device_os,\r\n        device_type,\r\n        expected_ctr,\r\n        historical_ad_relevance,\r\n        historical_expected_ctr,\r\n        historical_landing_page_experience,\r\n        historical_quality_score,\r\n        impressions as Impressions,\r\n        landing_page_experience,\r\n        low_quality_clicks,\r\n        low_quality_clicks_percent,\r\n        low_quality_conversion_rate,\r\n        low_quality_conversions,\r\n        low_quality_conversions_qualified,\r\n        low_quality_general_clicks,\r\n        low_quality_impressions,\r\n        low_quality_impressions_percent,\r\n        low_quality_sophisticated_clicks,\r\n        network,\r\n        phone_calls,\r\n        phone_impressions,\r\n        quality_score,\r\n        return_on_ad_spend,\r\n        revenue,\r\n        spend as Cost,\r\n        top_vs_other,\r\n        view_through_conversions\r\n    FROM _raw\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _renamed_columns\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [], "sources": [["bingads", "campaign_performance_daily_report"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bq_evo.bingads.campaign_performance_daily_report"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\bing_ads\\stg_bing_ads_campaign_performance_daily_report.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`bingads`.`campaign_performance_daily_report`\n),\n\n_renamed_columns AS(\n    SELECT \n        _fivetran_id,\n        _fivetran_synced,\n        account_id,\n        ad_distribution,\n        ad_relevance,\n        all_conversions,\n        all_conversions_qualified,\n        all_return_on_ad_spend,\n        all_revenue,\n        assists,\n        average_cpc,\n        average_position,\n        bid_match_type,\n        budget_association_status,\n        campaign_id,\n        campaign_name,\n        campaign_status,\n        clicks as Clicks,\n        conversions,\n        conversions_qualified,\n        ctr,\n        currency_code,\n        date as Date,\n        delivered_match_type,\n        device_os,\n        device_type,\n        expected_ctr,\n        historical_ad_relevance,\n        historical_expected_ctr,\n        historical_landing_page_experience,\n        historical_quality_score,\n        impressions as Impressions,\n        landing_page_experience,\n        low_quality_clicks,\n        low_quality_clicks_percent,\n        low_quality_conversion_rate,\n        low_quality_conversions,\n        low_quality_conversions_qualified,\n        low_quality_general_clicks,\n        low_quality_impressions,\n        low_quality_impressions_percent,\n        low_quality_sophisticated_clicks,\n        network,\n        phone_calls,\n        phone_impressions,\n        quality_score,\n        return_on_ad_spend,\n        revenue,\n        spend as Cost,\n        top_vs_other,\n        view_through_conversions\n    FROM _raw\n),\n\n_final AS(\n    SELECT *\n    FROM _renamed_columns\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.stg_google_ads_campaign_history": {"database": "oss-big-query-dashboard-prod", "schema": "staging", "name": "stg_google_ads_campaign_history", "resource_type": "model", "package_name": "bq_evo", "path": "staging\\google_ads\\stg_google_ads_campaign_history.sql", "original_file_path": "models\\staging\\google_ads\\stg_google_ads_campaign_history.sql", "unique_id": "model.bq_evo.stg_google_ads_campaign_history", "fqn": ["bq_evo", "staging", "google_ads", "stg_google_ads_campaign_history"], "alias": "stg_google_ads_campaign_history", "checksum": {"name": "sha256", "checksum": "41dac1cf01cf1920095f48d74d650643c9563053d1844cd9d7ad0de188bc4898"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "\u00c4nderungshistorie der Kampagnen. Jede Kampagne kann mehrfach auftauchen.", "columns": {"_fivetran_start": {"name": "_fivetran_start", "description": "Automatisch durch Fivetran generierte Spalte. Kann zu Logging-Zwecken genutzt werden.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "Kampagnen-ID Google, wichtigster Sekund\u00e4rschl\u00fcssel", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_active": {"name": "_fivetran_active", "description": "Automatisch durch Fivetran generierte Spalte. Kann zu Logging-Zwecken genutzt werden.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_end": {"name": "_fivetran_end", "description": "Automatisch durch Fivetran generierte Spalte. Kann zu Logging-Zwecken genutzt werden.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Automatisch durch Fivetran generierte Spalte. Kann zu Logging-Zwecken genutzt werden.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ad_serving_optimization_status": {"name": "ad_serving_optimization_status", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "advertising_channel_subtype": {"name": "advertising_channel_subtype", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "advertising_channel_type": {"name": "advertising_channel_type", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "base_campaign_id": {"name": "base_campaign_id", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID des Werbekontos", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "experiment_type": {"name": "experiment_type", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "final_url_suffix": {"name": "final_url_suffix", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "frequency_caps": {"name": "frequency_caps", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "campaign": {"name": "campaign", "description": "Kampagnenname wie in der jeweiligen Nutzeroberfl\u00e4che angezeigt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "optimization_score": {"name": "optimization_score", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_mode": {"name": "payment_mode", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "serving_status": {"name": "serving_status", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tracking_url_template": {"name": "tracking_url_template", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vanity_pharma_display_url_mode": {"name": "vanity_pharma_display_url_mode", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vanity_pharma_text": {"name": "vanity_pharma_text", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "video_brand_safety_suitability": {"name": "video_brand_safety_suitability", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "Source": {"name": "Source", "description": "Manuell durch NDG gesetzt Quelle/Medium.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "Medium": {"name": "Medium", "description": "Manuell durch NDG gesetzt Quelle/Medium.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "Partner": {"name": "Partner", "description": "Ist immer EVO, darf keine leeren Werte enthalten. Kann zuk\u00fcnftig zur Differenzierung mehrerer Marken genutzt werden.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "test": ["not_null"]}, "CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "test": ["not_null"]}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\staging\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "staging"}, "created_at": 1696938456.1788993, "relation_name": "`oss-big-query-dashboard-prod`.`staging`.`stg_google_ads_campaign_history`", "raw_code": "WITH _raw AS(\r\n  SELECT *\r\n  FROM {{ source('google_ads', 'campaign_history')}}\r\n),\r\n\r\n_renamed_columns AS(\r\n  SELECT\r\n    _fivetran_start,\r\n    id,\r\n    _fivetran_active,\r\n    _fivetran_end,\r\n    _fivetran_synced,\r\n    ad_serving_optimization_status,\r\n    advertising_channel_subtype,\r\n    advertising_channel_type,\r\n    base_campaign_id,\r\n    customer_id,\r\n    end_date,\r\n    experiment_type,\r\n    final_url_suffix,\r\n    frequency_caps,\r\n    name as campaign,\r\n    optimization_score,\r\n    payment_mode,\r\n    serving_status,\r\n    start_date,\r\n    status,\r\n    tracking_url_template,\r\n    updated_at,\r\n    vanity_pharma_display_url_mode,\r\n    vanity_pharma_text,\r\n    video_brand_safety_suitability\r\n  FROM _raw\r\n),\r\n\r\n_add_new_columns AS(\r\n  SELECT \r\n    *,\r\n    'google' as Source,\r\n    'cpc' as Medium,\r\n    (CASE\r\n      WHEN customer_id = 6607387807 THEN 'EVO'  \r\n      ELSE '(null)'\r\n    END) as Partner\r\n  FROM _renamed_columns\r\n),\r\n\r\n_final AS(\r\n  SELECT\r\n    *,\r\n    LOWER(CONCAT(campaign, Source, Medium, Partner)) as CampaignID\r\n  FROM _add_new_columns\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [], "sources": [["google_ads", "campaign_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bq_evo.google_ads.campaign_history"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\google_ads\\stg_google_ads_campaign_history.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n  SELECT *\n  FROM `oss-big-query-dashboard-prod`.`google_ads`.`campaign_history`\n),\n\n_renamed_columns AS(\n  SELECT\n    _fivetran_start,\n    id,\n    _fivetran_active,\n    _fivetran_end,\n    _fivetran_synced,\n    ad_serving_optimization_status,\n    advertising_channel_subtype,\n    advertising_channel_type,\n    base_campaign_id,\n    customer_id,\n    end_date,\n    experiment_type,\n    final_url_suffix,\n    frequency_caps,\n    name as campaign,\n    optimization_score,\n    payment_mode,\n    serving_status,\n    start_date,\n    status,\n    tracking_url_template,\n    updated_at,\n    vanity_pharma_display_url_mode,\n    vanity_pharma_text,\n    video_brand_safety_suitability\n  FROM _raw\n),\n\n_add_new_columns AS(\n  SELECT \n    *,\n    'google' as Source,\n    'cpc' as Medium,\n    (CASE\n      WHEN customer_id = 6607387807 THEN 'EVO'  \n      ELSE '(null)'\n    END) as Partner\n  FROM _renamed_columns\n),\n\n_final AS(\n  SELECT\n    *,\n    LOWER(CONCAT(campaign, Source, Medium, Partner)) as CampaignID\n  FROM _add_new_columns\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.stg_google_ads_campaign_stats": {"database": "oss-big-query-dashboard-prod", "schema": "staging", "name": "stg_google_ads_campaign_stats", "resource_type": "model", "package_name": "bq_evo", "path": "staging\\google_ads\\stg_google_ads_campaign_stats.sql", "original_file_path": "models\\staging\\google_ads\\stg_google_ads_campaign_stats.sql", "unique_id": "model.bq_evo.stg_google_ads_campaign_stats", "fqn": ["bq_evo", "staging", "google_ads", "stg_google_ads_campaign_stats"], "alias": "stg_google_ads_campaign_stats", "checksum": {"name": "sha256", "checksum": "1d04eacef344c8fa954616987557e522e9518d8dd8307a89a9d8d05573e197e5"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt die wichtigsten Performancestatistiken auf Kampagnenebene.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Automatisch durch Fivetran generierte Spalte. Kann zu Logging-Zwecken genutzt werden.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Automatisch durch Fivetran generierte Spalte. Kann zu Logging-Zwecken genutzt werden.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID des Werbekontos", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_view_impressions": {"name": "active_view_impressions", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_view_measurability": {"name": "active_view_measurability", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_view_measurable_cost_micros": {"name": "active_view_measurable_cost_micros", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_view_measurable_impressions": {"name": "active_view_measurable_impressions", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_view_viewability": {"name": "active_view_viewability", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ad_network_type": {"name": "ad_network_type", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "base_campaign": {"name": "base_campaign", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "Anzeigenklicks", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conversions": {"name": "conversions", "description": "Conversions gem\u00e4\u00df Google Ads - sollte nicht verwendet werden.  F\u00fcr Reportings werden Werte direkt aus Google Analytics genutzt.   \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "conversions_value": {"name": "conversions_value", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cost": {"name": "cost", "description": "Kosten in Euro", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device": {"name": "device", "description": "Ger\u00e4t \u00fcber das das Event generiert wurde (bspw. Anzeigenklick oder Sitzungsbeginn)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "Kampagnen-ID Google, wichtigster Sekund\u00e4rschl\u00fcssel", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "Anzeigenimpressionen", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "interaction_event_types": {"name": "interaction_event_types", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "interactions": {"name": "interactions", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "view_through_conversions": {"name": "view_through_conversions", "description": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\staging\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "staging"}, "created_at": 1696938456.1747875, "relation_name": "`oss-big-query-dashboard-prod`.`staging`.`stg_google_ads_campaign_stats`", "raw_code": "WITH _raw AS(\r\n    SELECT * \r\n    FROM {{source('google_ads','campaign_stats')}}\r\n\r\n),\r\n\r\n_transformed_cost AS(\r\n    SELECT\r\n        _fivetran_id,\r\n        customer_id,\r\n        date,\r\n        _fivetran_synced,\r\n        active_view_impressions,\r\n        active_view_measurability,\r\n        active_view_measurable_cost_micros,\r\n        active_view_measurable_impressions,\r\n        active_view_viewability,\r\n        ad_network_type,\r\n        base_campaign,\r\n        clicks,\r\n        conversions,\r\n        conversions_value,\r\n        cost_micros/1000000 as cost,\r\n        device,\r\n        id,\r\n        impressions,\r\n        interaction_event_types,\r\n        interactions,\r\n        view_through_conversions,\r\n    FROM _raw\r\n),\r\n\r\n_final AS(\r\n    SELECT * FROM _transformed_cost\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [], "sources": [["google_ads", "campaign_stats"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bq_evo.google_ads.campaign_stats"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\google_ads\\stg_google_ads_campaign_stats.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT * \n    FROM `oss-big-query-dashboard-prod`.`google_ads`.`campaign_stats`\n\n),\n\n_transformed_cost AS(\n    SELECT\n        _fivetran_id,\n        customer_id,\n        date,\n        _fivetran_synced,\n        active_view_impressions,\n        active_view_measurability,\n        active_view_measurable_cost_micros,\n        active_view_measurable_impressions,\n        active_view_viewability,\n        ad_network_type,\n        base_campaign,\n        clicks,\n        conversions,\n        conversions_value,\n        cost_micros/1000000 as cost,\n        device,\n        id,\n        impressions,\n        interaction_event_types,\n        interactions,\n        view_through_conversions,\n    FROM _raw\n),\n\n_final AS(\n    SELECT * FROM _transformed_cost\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.stg_google_analytics_352128287": {"database": "oss-big-query-dashboard-prod", "schema": "staging", "name": "stg_google_analytics_352128287", "resource_type": "model", "package_name": "bq_evo", "path": "staging\\google_analytics\\stg_google_analytics_352128287.sql", "original_file_path": "models\\staging\\google_analytics\\stg_google_analytics_352128287.sql", "unique_id": "model.bq_evo.stg_google_analytics_352128287", "fqn": ["bq_evo", "staging", "google_analytics", "stg_google_analytics_352128287"], "alias": "stg_google_analytics_352128287", "checksum": {"name": "sha256", "checksum": "13b6dfa73157e3fd36ff7cda132c010cee32dca468101e09586c5183772937ac"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt alle GA4-Events in Tabellenform ohne Schachtelung.  Bereinigt fehlerhafte Events ohne Session-ID.  Offzielle Doku Google: https://support.google.com/analytics/answer/7029846?hl=en#zippy=\n", "columns": {"ltv_revenue": {"name": "ltv_revenue", "description": "User Lifetime Value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ltv_currency": {"name": "ltv_currency", "description": "Einheit des User Lifetime Value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\staging\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "staging"}, "created_at": 1696938456.179903, "relation_name": "`oss-big-query-dashboard-prod`.`staging`.`stg_google_analytics_352128287`", "raw_code": "WITH _source AS(\r\n  SELECT\r\n    PARSE_DATE('%Y%m%d', event_date) as event_date,\r\n    TIMESTAMP_MICROS(event_timestamp) as event_ts,\r\n    \r\n    MAX(CASE WHEN params.key = 'ga_session_id' THEN value.int_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as session_id,\r\n    user_pseudo_id,\r\n    TIMESTAMP_MICROS(user_first_touch_timestamp) as user_first_touch_ts,\r\n\r\n    event_name,\r\n\r\n    params.key as params_key,\r\n    params.value.string_value as params_string_value,\r\n    params.value.int_value as params_int_value,\r\n    params.value.float_value as params_float_value,\r\n    params.value.double_value as params_double_value,\r\n\r\n    (CASE WHEN traffic_source.name IS NULL THEN '(not set)' ELSE traffic_source.name END) as utm_campaign,\r\n    (CASE WHEN traffic_source.medium IS NULL THEN '(not set)' ELSE traffic_source.medium END) as utm_medium,\r\n    (CASE WHEN traffic_source.source IS NULL THEN '(not set)' ELSE traffic_source.source END) as utm_source,\r\n    'EVO' as Partner,\r\n\r\n    MAX(CASE WHEN params.key = 'page_title' THEN value.string_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as page_title,\r\n    MAX(CASE WHEN params.key = 'page_location' THEN value.string_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as page_location,\r\n    MAX(CASE WHEN params.key = 'page_referrer' THEN value.string_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as page_referrer,\r\n    MAX(CASE WHEN params.key = 'page_path' THEN value.string_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as page_path,\r\n    MAX(CASE WHEN params.key = 'percent_scrolled' THEN value.int_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as percent_scrolled,\r\n    MAX(CASE WHEN params.key = 'session_engaged' THEN value.string_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as session_engaged,\r\n\r\n    privacy_info.analytics_storage as analytics_storage,\r\n    privacy_info.ads_storage as ads_storage,\r\n    privacy_info.uses_transient_token as uses_transient_token,\r\n\r\n    user_ltv.revenue as ltv_revenue,\r\n    user_ltv.currency as ltv_currency,\r\n\r\n    device.category as device_category,\r\n    device.mobile_brand_name as device_brand,\r\n    device.mobile_model_name as device_model_name,\r\n    device.mobile_marketing_name as device_marketing_name,\r\n    device.mobile_os_hardware_model as device_mobile_os_hardware_model,\r\n    device.operating_system as device_os,\r\n    device.operating_system_version as device_os_version,\r\n    device.vendor_id as device_vendor_id,\r\n    device.advertising_id as device_advertising_id,\r\n    device.language as device_language,\r\n    device.is_limited_ad_tracking as device_is_limited_ad_tracking,\r\n    device.time_zone_offset_seconds as device_time_zone_offset_seconds,\r\n    device.browser as device_browser,\r\n    device.browser_version as device_browser_version,\r\n    device.web_info.browser as device_web_info_browser,\r\n    device.web_info.browser_version as device_web_info_browser_version,\r\n    device.web_info.hostname as browser_web_info_hostname,\r\n\r\n    geo.continent as continent,\r\n    geo.country as country,\r\n    geo.region as region,\r\n    geo.city as city,\r\n    geo.sub_continent as sub_continent,\r\n    geo.metro as metropolitan_area,\r\n\r\n    app_info.id as app_id,\r\n    app_info.version as app_version,\r\n    app_info.install_store as app_install_store,\r\n    app_info.firebase_app_id as app_firebase_app_id,\r\n    app_info.install_source as app_install_source,\r\n\r\n    event_dimensions.hostname as event_hostname,\r\n\r\n    ecommerce.total_item_quantity as total_item_quantity,\r\n    ecommerce.purchase_revenue_in_usd as purchase_revenue_in_usd,\r\n    ecommerce.purchase_revenue as purchase_revenue,\r\n    ecommerce.refund_value_in_usd as refund_value_in_usd,\r\n    ecommerce.refund_value as refund_value,\r\n    ecommerce.shipping_value_in_usd as shipping_value_in_usd,\r\n    ecommerce.shipping_value as shipping_value,\r\n    ecommerce.tax_value_in_usd as tax_value_in_usd,\r\n    ecommerce.tax_value as tax_value,\r\n    ecommerce.unique_items as unique_items,\r\n    ecommerce.transaction_id as transaction_id,\r\n    \r\n    items.item_id as item_id,\r\n    items.item_name as item_name,\r\n    items.item_brand as item_brand,\r\n    items.item_variant as item_variant,\r\n    items.item_category as item_category,\r\n    items.item_category2 as item_category2,\r\n    items.item_category3 as item_category3,\r\n    items.item_category4 as item_category4,\r\n    items.item_category5 as item_category5,\r\n    items.price_in_usd as price_in_usd,\r\n    items.price as price,\r\n    items.quantity as quantity,\r\n    items.item_revenue_in_usd as item_revenue_in_usd,\r\n    items.item_revenue as item_revenue,\r\n    items.item_refund_in_usd as item_refund_in_usd,\r\n    items.item_refund as item_refund,\r\n    items.coupon as coupon,\r\n    items.affiliation as affiliation,\r\n    items.location_id as location_id,\r\n    items.item_list_id as item_list_id,\r\n    items.item_list_name as item_list_name,\r\n    items.item_list_index as item_list_index,\r\n    items.promotion_id as promotion_id,\r\n    items.promotion_name as promotion_name,\r\n    items.creative_name as creative_name,\r\n    items.creative_slot as creative_slot,\r\n\r\n    collected_traffic_source.manual_campaign_id as manual_campaign_id,\r\n    collected_traffic_source.manual_campaign_name as manual_campaign_name,\r\n    collected_traffic_source.manual_source as manual_source,\r\n    collected_traffic_source.manual_medium as manual_medium,\r\n    collected_traffic_source.manual_term as manual_term,\r\n    collected_traffic_source.manual_content as manual_content,\r\n    collected_traffic_source.gclid as gclid,\r\n    collected_traffic_source.dclid as dclid,\r\n    collected_traffic_source.srsltid as srsltid\r\n\r\n  FROM {{ source('analytics_352128287', 'events')}} as events\r\n  LEFT JOIN UNNEST (event_params) as params\r\n  /*LEFT JOIN UNNEST (privacy_info) as privacy_info\r\n  LEFT JOIN UNNEST (user_ltv) as user_ltv*/\r\n  LEFT JOIN UNNEST(items) as items \r\n),\r\n\r\nevents_aggregated as (\r\n  SELECT\r\n    event_date,\r\n    event_ts,\r\n    session_id,\r\n    user_pseudo_id,\r\n    user_first_touch_ts,\r\n    event_name,\r\n\r\n--Kampagneninformationen\r\n    MAX(utm_campaign) as utm_campaign,\r\n    MAX(utm_medium) as utm_medium,\r\n    (CASE WHEN MAX(utm_source) = 'ig' THEN 'instagram' ELSE MAX(utm_source) END) as utm_source,\r\n  --  (CASE WHEN MAX(utm_campaign) IS NULL THEN '(not set)' ELSE MAX(utm_campaign) END) as utm_campaign,\r\n  --  (CASE WHEN MAX(utm_medium) IS NULL THEN '(not set)' ELSE MAX(utm_medium) END) as utm_medium,\r\n  --  (CASE WHEN MAX(utm_source) IS NULL THEN '(not set)' ELSE MAX(utm_source) END) as utm_source,\r\n\r\n--Seiteninformationen\r\n    MAX(page_title) as page_title,\r\n    MAX(page_location) as page_location,\r\n    MAX(page_referrer) as page_referrer,\r\n    MAX(page_path) as page_path,\r\n    MAX(percent_scrolled) as percent_scrolled,\r\n    MAX(session_engaged) as session_engaged,\r\n\r\n--Privacy-Infos\r\n    MAX(analytics_storage) as analytics_storage,\r\n    MAX(ads_storage) as ads_storage,\r\n    MAX(uses_transient_token) as uses_transient_token,\r\n\r\n--Kundenwertinformationen\r\n    MAX(ltv_revenue) as ltv_revenue,\r\n    MAX(ltv_currency) as ltv_currency,\r\n\r\n--Ger\u00e4teinformationen\r\n    MAX(device_category) as device_category,\r\n    MAX(device_brand) as device_brand,\r\n    MAX(device_model_name) as device_model_name,\r\n    MAX(device_marketing_name) as device_marketing_name,\r\n    MAX(device_mobile_os_hardware_model) as device_mobile_os_hardware_model,\r\n    MAX(device_os) as device_os,\r\n    MAX(device_os_version) as device_os_version,\r\n    MAX(device_vendor_id) as device_vendor_id,\r\n    MAX(device_advertising_id) as device_advertising_id,\r\n    MAX(device_language) as device_language,\r\n    MAX(device_is_limited_ad_tracking) as device_is_limited_ad_tracking,\r\n    MAX(device_time_zone_offset_seconds) as device_time_zone_offset_seconds,\r\n    MAX(device_browser) as device_browser,\r\n    MAX(device_browser_version) as device_browser_version,\r\n    MAX(device_web_info_browser) as device_web_info_browser,\r\n    MAX(device_web_info_browser_version) as device_web_info_browser_version,\r\n    MAX(browser_web_info_hostname) as browser_web_info_hostname,\r\n\r\n--Gebietsinformationen\r\n    MAX(continent) as continent,\r\n    MAX(country) as country,\r\n    MAX(region) as region,\r\n    MAX(city) as city,\r\n    MAX(sub_continent) as sub_continent,\r\n    MAX(metropolitan_area) as metropolitan_area,\r\n\r\n--App-Informationen\r\n    MAX(app_id) as app_id,\r\n    MAX(app_version) as app_version,\r\n    MAX(app_install_store) as app_install_store,\r\n    MAX(app_firebase_app_id) as app_firebase_app_id,\r\n    MAX(app_install_source) as app_install_source,\r\n\r\n    MAX(event_hostname) as event_hostname,\r\n\r\n--E-Commerceinformationen\r\n    MAX(total_item_quantity) as total_item_quantity,\r\n    MAX(purchase_revenue_in_usd) as purchase_revenue_in_usd,\r\n    MAX(purchase_revenue) as purchase_revenue,\r\n    MAX(refund_value_in_usd) as refund_value_in_usd,\r\n    MAX(refund_value) as refund_value,\r\n    MAX(shipping_value_in_usd) as shipping_value_in_usd,\r\n    MAX(shipping_value) as shipping_value,\r\n    MAX(tax_value_in_usd) as tax_value_in_usd,\r\n    MAX(tax_value) as tax_value,\r\n    MAX(unique_items) as unique_items,\r\n    MAX(transaction_id) as transaction_id,\r\n\r\n--Warenkorbinformationen\r\n    MAX(item_id) as item_id,\r\n    MAX(item_name) as item_name,\r\n    MAX(item_brand) as item_brand,\r\n    MAX(item_variant) as item_variant,\r\n    MAX(item_category) as item_category,\r\n    MAX(item_category2) as item_category2,\r\n    MAX(item_category3) as item_category3,\r\n    MAX(item_category4) as item_category4,\r\n    MAX(item_category5) as item_category5,\r\n    MAX(price_in_usd) as price_in_usd,\r\n    MAX(price) as price,\r\n    MAX(quantity) as quantity,\r\n    MAX(item_revenue_in_usd) as item_revenue_in_usd,\r\n    MAX(item_revenue) as item_revenue,\r\n    MAX(item_refund_in_usd) as item_refund_in_usd,\r\n    MAX(item_refund) as item_refund,\r\n    MAX(coupon) as coupon,\r\n    MAX(affiliation) as affiliation,\r\n    MAX(location_id) as location_id,\r\n    MAX(item_list_id) as item_list_id,\r\n    MAX(item_list_name) as item_list_name,\r\n    MAX(item_list_index) as item_list_index,\r\n    MAX(promotion_id) as promotion_id,\r\n    MAX(promotion_name) as promotion_name,\r\n    MAX(creative_name) as creative_name,\r\n    MAX(creative_slot) as creative_slot,\r\n\r\n--Manuelle Trackingparameter\r\n    MAX(manual_campaign_id) as manual_campaign_id,\r\n    MAX(manual_campaign_name) as manual_campaign_name,\r\n    MAX(manual_source) as manual_source,\r\n    MAX(manual_medium) as manual_medium,\r\n    MAX(manual_term) as manual_term,\r\n    MAX(manual_content) as manual_content,\r\n    MAX(gclid) as gclid,\r\n    MAX(dclid) as dclid,\r\n    MAX(srsltid) as srsltid\r\n\r\n  FROM _source\r\n  WHERE session_id <> 0\r\n  GROUP BY 1,2,3,4,5,6\r\n)\r\n\r\nSELECT *\r\n  --DISTINCT event_date\r\nFROM events_aggregated", "language": "sql", "refs": [], "sources": [["analytics_352128287", "events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bq_evo.analytics_352128287.events"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\google_analytics\\stg_google_analytics_352128287.sql", "compiled": true, "compiled_code": "WITH _source AS(\n  SELECT\n    PARSE_DATE('%Y%m%d', event_date) as event_date,\n    TIMESTAMP_MICROS(event_timestamp) as event_ts,\n    \n    MAX(CASE WHEN params.key = 'ga_session_id' THEN value.int_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as session_id,\n    user_pseudo_id,\n    TIMESTAMP_MICROS(user_first_touch_timestamp) as user_first_touch_ts,\n\n    event_name,\n\n    params.key as params_key,\n    params.value.string_value as params_string_value,\n    params.value.int_value as params_int_value,\n    params.value.float_value as params_float_value,\n    params.value.double_value as params_double_value,\n\n    (CASE WHEN traffic_source.name IS NULL THEN '(not set)' ELSE traffic_source.name END) as utm_campaign,\n    (CASE WHEN traffic_source.medium IS NULL THEN '(not set)' ELSE traffic_source.medium END) as utm_medium,\n    (CASE WHEN traffic_source.source IS NULL THEN '(not set)' ELSE traffic_source.source END) as utm_source,\n    'EVO' as Partner,\n\n    MAX(CASE WHEN params.key = 'page_title' THEN value.string_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as page_title,\n    MAX(CASE WHEN params.key = 'page_location' THEN value.string_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as page_location,\n    MAX(CASE WHEN params.key = 'page_referrer' THEN value.string_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as page_referrer,\n    MAX(CASE WHEN params.key = 'page_path' THEN value.string_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as page_path,\n    MAX(CASE WHEN params.key = 'percent_scrolled' THEN value.int_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as percent_scrolled,\n    MAX(CASE WHEN params.key = 'session_engaged' THEN value.string_value ELSE NULL END) OVER (PARTITION BY event_timestamp, user_pseudo_id) as session_engaged,\n\n    privacy_info.analytics_storage as analytics_storage,\n    privacy_info.ads_storage as ads_storage,\n    privacy_info.uses_transient_token as uses_transient_token,\n\n    user_ltv.revenue as ltv_revenue,\n    user_ltv.currency as ltv_currency,\n\n    device.category as device_category,\n    device.mobile_brand_name as device_brand,\n    device.mobile_model_name as device_model_name,\n    device.mobile_marketing_name as device_marketing_name,\n    device.mobile_os_hardware_model as device_mobile_os_hardware_model,\n    device.operating_system as device_os,\n    device.operating_system_version as device_os_version,\n    device.vendor_id as device_vendor_id,\n    device.advertising_id as device_advertising_id,\n    device.language as device_language,\n    device.is_limited_ad_tracking as device_is_limited_ad_tracking,\n    device.time_zone_offset_seconds as device_time_zone_offset_seconds,\n    device.browser as device_browser,\n    device.browser_version as device_browser_version,\n    device.web_info.browser as device_web_info_browser,\n    device.web_info.browser_version as device_web_info_browser_version,\n    device.web_info.hostname as browser_web_info_hostname,\n\n    geo.continent as continent,\n    geo.country as country,\n    geo.region as region,\n    geo.city as city,\n    geo.sub_continent as sub_continent,\n    geo.metro as metropolitan_area,\n\n    app_info.id as app_id,\n    app_info.version as app_version,\n    app_info.install_store as app_install_store,\n    app_info.firebase_app_id as app_firebase_app_id,\n    app_info.install_source as app_install_source,\n\n    event_dimensions.hostname as event_hostname,\n\n    ecommerce.total_item_quantity as total_item_quantity,\n    ecommerce.purchase_revenue_in_usd as purchase_revenue_in_usd,\n    ecommerce.purchase_revenue as purchase_revenue,\n    ecommerce.refund_value_in_usd as refund_value_in_usd,\n    ecommerce.refund_value as refund_value,\n    ecommerce.shipping_value_in_usd as shipping_value_in_usd,\n    ecommerce.shipping_value as shipping_value,\n    ecommerce.tax_value_in_usd as tax_value_in_usd,\n    ecommerce.tax_value as tax_value,\n    ecommerce.unique_items as unique_items,\n    ecommerce.transaction_id as transaction_id,\n    \n    items.item_id as item_id,\n    items.item_name as item_name,\n    items.item_brand as item_brand,\n    items.item_variant as item_variant,\n    items.item_category as item_category,\n    items.item_category2 as item_category2,\n    items.item_category3 as item_category3,\n    items.item_category4 as item_category4,\n    items.item_category5 as item_category5,\n    items.price_in_usd as price_in_usd,\n    items.price as price,\n    items.quantity as quantity,\n    items.item_revenue_in_usd as item_revenue_in_usd,\n    items.item_revenue as item_revenue,\n    items.item_refund_in_usd as item_refund_in_usd,\n    items.item_refund as item_refund,\n    items.coupon as coupon,\n    items.affiliation as affiliation,\n    items.location_id as location_id,\n    items.item_list_id as item_list_id,\n    items.item_list_name as item_list_name,\n    items.item_list_index as item_list_index,\n    items.promotion_id as promotion_id,\n    items.promotion_name as promotion_name,\n    items.creative_name as creative_name,\n    items.creative_slot as creative_slot,\n\n    collected_traffic_source.manual_campaign_id as manual_campaign_id,\n    collected_traffic_source.manual_campaign_name as manual_campaign_name,\n    collected_traffic_source.manual_source as manual_source,\n    collected_traffic_source.manual_medium as manual_medium,\n    collected_traffic_source.manual_term as manual_term,\n    collected_traffic_source.manual_content as manual_content,\n    collected_traffic_source.gclid as gclid,\n    collected_traffic_source.dclid as dclid,\n    collected_traffic_source.srsltid as srsltid\n\n  FROM `oss-big-query-dashboard-prod`.`analytics_352128287`.`events_*` as events\n  LEFT JOIN UNNEST (event_params) as params\n  /*LEFT JOIN UNNEST (privacy_info) as privacy_info\n  LEFT JOIN UNNEST (user_ltv) as user_ltv*/\n  LEFT JOIN UNNEST(items) as items \n),\n\nevents_aggregated as (\n  SELECT\n    event_date,\n    event_ts,\n    session_id,\n    user_pseudo_id,\n    user_first_touch_ts,\n    event_name,\n\n--Kampagneninformationen\n    MAX(utm_campaign) as utm_campaign,\n    MAX(utm_medium) as utm_medium,\n    (CASE WHEN MAX(utm_source) = 'ig' THEN 'instagram' ELSE MAX(utm_source) END) as utm_source,\n  --  (CASE WHEN MAX(utm_campaign) IS NULL THEN '(not set)' ELSE MAX(utm_campaign) END) as utm_campaign,\n  --  (CASE WHEN MAX(utm_medium) IS NULL THEN '(not set)' ELSE MAX(utm_medium) END) as utm_medium,\n  --  (CASE WHEN MAX(utm_source) IS NULL THEN '(not set)' ELSE MAX(utm_source) END) as utm_source,\n\n--Seiteninformationen\n    MAX(page_title) as page_title,\n    MAX(page_location) as page_location,\n    MAX(page_referrer) as page_referrer,\n    MAX(page_path) as page_path,\n    MAX(percent_scrolled) as percent_scrolled,\n    MAX(session_engaged) as session_engaged,\n\n--Privacy-Infos\n    MAX(analytics_storage) as analytics_storage,\n    MAX(ads_storage) as ads_storage,\n    MAX(uses_transient_token) as uses_transient_token,\n\n--Kundenwertinformationen\n    MAX(ltv_revenue) as ltv_revenue,\n    MAX(ltv_currency) as ltv_currency,\n\n--Ger\u00e4teinformationen\n    MAX(device_category) as device_category,\n    MAX(device_brand) as device_brand,\n    MAX(device_model_name) as device_model_name,\n    MAX(device_marketing_name) as device_marketing_name,\n    MAX(device_mobile_os_hardware_model) as device_mobile_os_hardware_model,\n    MAX(device_os) as device_os,\n    MAX(device_os_version) as device_os_version,\n    MAX(device_vendor_id) as device_vendor_id,\n    MAX(device_advertising_id) as device_advertising_id,\n    MAX(device_language) as device_language,\n    MAX(device_is_limited_ad_tracking) as device_is_limited_ad_tracking,\n    MAX(device_time_zone_offset_seconds) as device_time_zone_offset_seconds,\n    MAX(device_browser) as device_browser,\n    MAX(device_browser_version) as device_browser_version,\n    MAX(device_web_info_browser) as device_web_info_browser,\n    MAX(device_web_info_browser_version) as device_web_info_browser_version,\n    MAX(browser_web_info_hostname) as browser_web_info_hostname,\n\n--Gebietsinformationen\n    MAX(continent) as continent,\n    MAX(country) as country,\n    MAX(region) as region,\n    MAX(city) as city,\n    MAX(sub_continent) as sub_continent,\n    MAX(metropolitan_area) as metropolitan_area,\n\n--App-Informationen\n    MAX(app_id) as app_id,\n    MAX(app_version) as app_version,\n    MAX(app_install_store) as app_install_store,\n    MAX(app_firebase_app_id) as app_firebase_app_id,\n    MAX(app_install_source) as app_install_source,\n\n    MAX(event_hostname) as event_hostname,\n\n--E-Commerceinformationen\n    MAX(total_item_quantity) as total_item_quantity,\n    MAX(purchase_revenue_in_usd) as purchase_revenue_in_usd,\n    MAX(purchase_revenue) as purchase_revenue,\n    MAX(refund_value_in_usd) as refund_value_in_usd,\n    MAX(refund_value) as refund_value,\n    MAX(shipping_value_in_usd) as shipping_value_in_usd,\n    MAX(shipping_value) as shipping_value,\n    MAX(tax_value_in_usd) as tax_value_in_usd,\n    MAX(tax_value) as tax_value,\n    MAX(unique_items) as unique_items,\n    MAX(transaction_id) as transaction_id,\n\n--Warenkorbinformationen\n    MAX(item_id) as item_id,\n    MAX(item_name) as item_name,\n    MAX(item_brand) as item_brand,\n    MAX(item_variant) as item_variant,\n    MAX(item_category) as item_category,\n    MAX(item_category2) as item_category2,\n    MAX(item_category3) as item_category3,\n    MAX(item_category4) as item_category4,\n    MAX(item_category5) as item_category5,\n    MAX(price_in_usd) as price_in_usd,\n    MAX(price) as price,\n    MAX(quantity) as quantity,\n    MAX(item_revenue_in_usd) as item_revenue_in_usd,\n    MAX(item_revenue) as item_revenue,\n    MAX(item_refund_in_usd) as item_refund_in_usd,\n    MAX(item_refund) as item_refund,\n    MAX(coupon) as coupon,\n    MAX(affiliation) as affiliation,\n    MAX(location_id) as location_id,\n    MAX(item_list_id) as item_list_id,\n    MAX(item_list_name) as item_list_name,\n    MAX(item_list_index) as item_list_index,\n    MAX(promotion_id) as promotion_id,\n    MAX(promotion_name) as promotion_name,\n    MAX(creative_name) as creative_name,\n    MAX(creative_slot) as creative_slot,\n\n--Manuelle Trackingparameter\n    MAX(manual_campaign_id) as manual_campaign_id,\n    MAX(manual_campaign_name) as manual_campaign_name,\n    MAX(manual_source) as manual_source,\n    MAX(manual_medium) as manual_medium,\n    MAX(manual_term) as manual_term,\n    MAX(manual_content) as manual_content,\n    MAX(gclid) as gclid,\n    MAX(dclid) as dclid,\n    MAX(srsltid) as srsltid\n\n  FROM _source\n  WHERE session_id <> 0\n  GROUP BY 1,2,3,4,5,6\n)\n\nSELECT *\n  --DISTINCT event_date\nFROM events_aggregated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.stg_google_analytics_historic_campaigns": {"database": "oss-big-query-dashboard-prod", "schema": "staging", "name": "stg_google_analytics_historic_campaigns", "resource_type": "model", "package_name": "bq_evo", "path": "staging\\google_analytics\\stg_google_analytics_historic_campaigns.sql", "original_file_path": "models\\staging\\google_analytics\\stg_google_analytics_historic_campaigns.sql", "unique_id": "model.bq_evo.stg_google_analytics_historic_campaigns", "fqn": ["bq_evo", "staging", "google_analytics", "stg_google_analytics_historic_campaigns"], "alias": "stg_google_analytics_historic_campaigns", "checksum": {"name": "sha256", "checksum": "141bcdffcf5c86e7d2bc3920b0d02e51ea54ab6a41425018ca5acd20d5b19335"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt alle historischen Kampagnen aus Universal Analytics / GA3", "columns": {"CampaignID": {"name": "CampaignID", "description": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\staging\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "staging"}, "created_at": 1696938456.179903, "relation_name": "`oss-big-query-dashboard-prod`.`staging`.`stg_google_analytics_historic_campaigns`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ source('manual_data_upload', 'universal_analytics_historic_campaigns')}}\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _raw\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [], "sources": [["manual_data_upload", "universal_analytics_historic_campaigns"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bq_evo.manual_data_upload.universal_analytics_historic_campaigns"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\google_analytics\\stg_google_analytics_historic_campaigns.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`manual_data_upload`.`universal_analytics_historic_campaigns`\n),\n\n_final AS(\n    SELECT *\n    FROM _raw\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.stg_google_analytics_historic_goal_conversions": {"database": "oss-big-query-dashboard-prod", "schema": "staging", "name": "stg_google_analytics_historic_goal_conversions", "resource_type": "model", "package_name": "bq_evo", "path": "staging\\google_analytics\\stg_google_analytics_historic_goal_conversions.sql", "original_file_path": "models\\staging\\google_analytics\\stg_google_analytics_historic_goal_conversions.sql", "unique_id": "model.bq_evo.stg_google_analytics_historic_goal_conversions", "fqn": ["bq_evo", "staging", "google_analytics", "stg_google_analytics_historic_goal_conversions"], "alias": "stg_google_analytics_historic_goal_conversions", "checksum": {"name": "sha256", "checksum": "71fc98fe234173e12ce22f75fb97aa0abf81966c8960bd6f8270d2c62709052f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "staging"}, "created_at": 1696938456.1153173, "relation_name": "`oss-big-query-dashboard-prod`.`staging`.`stg_google_analytics_historic_goal_conversions`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ source('manual_data_upload', 'universal_analytics_historic_goal_conversions')}}\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _raw\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [], "sources": [["manual_data_upload", "universal_analytics_historic_goal_conversions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bq_evo.manual_data_upload.universal_analytics_historic_goal_conversions"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\google_analytics\\stg_google_analytics_historic_goal_conversions.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`manual_data_upload`.`universal_analytics_historic_goal_conversions`\n),\n\n_final AS(\n    SELECT *\n    FROM _raw\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.stg_google_analytics_historic_transactions": {"database": "oss-big-query-dashboard-prod", "schema": "staging", "name": "stg_google_analytics_historic_transactions", "resource_type": "model", "package_name": "bq_evo", "path": "staging\\google_analytics\\stg_google_analytics_historic_transactions.sql", "original_file_path": "models\\staging\\google_analytics\\stg_google_analytics_historic_transactions.sql", "unique_id": "model.bq_evo.stg_google_analytics_historic_transactions", "fqn": ["bq_evo", "staging", "google_analytics", "stg_google_analytics_historic_transactions"], "alias": "stg_google_analytics_historic_transactions", "checksum": {"name": "sha256", "checksum": "8c896f7f73b6fd5ce5e0e615a6ed82e8e7ca74a07684173fd2e09048c602d499"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "staging"}, "created_at": 1696938456.1163232, "relation_name": "`oss-big-query-dashboard-prod`.`staging`.`stg_google_analytics_historic_transactions`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ source('manual_data_upload', 'universal_analytics_historic_transactions')}}\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _raw\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [], "sources": [["manual_data_upload", "universal_analytics_historic_transactions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bq_evo.manual_data_upload.universal_analytics_historic_transactions"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\google_analytics\\stg_google_analytics_historic_transactions.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`manual_data_upload`.`universal_analytics_historic_transactions`\n),\n\n_final AS(\n    SELECT *\n    FROM _raw\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.stg_linkedin_ad_analytics_by_campaign": {"database": "oss-big-query-dashboard-prod", "schema": "staging", "name": "stg_linkedin_ad_analytics_by_campaign", "resource_type": "model", "package_name": "bq_evo", "path": "staging\\linkedin\\stg_linkedin_ad_analytics_by_campaign.sql", "original_file_path": "models\\staging\\linkedin\\stg_linkedin_ad_analytics_by_campaign.sql", "unique_id": "model.bq_evo.stg_linkedin_ad_analytics_by_campaign", "fqn": ["bq_evo", "staging", "linkedin", "stg_linkedin_ad_analytics_by_campaign"], "alias": "stg_linkedin_ad_analytics_by_campaign", "checksum": {"name": "sha256", "checksum": "92e399a048b014e95ff2a95a499ed3038fda1d0f8b972f578fe7fe34206a0257"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt alle Performancestatistiken der Linkedin-Kampagnen. Enth\u00e4lt keine Conversioninformationen.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\staging\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "staging"}, "created_at": 1696938456.180894, "relation_name": "`oss-big-query-dashboard-prod`.`staging`.`stg_linkedin_ad_analytics_by_campaign`", "raw_code": "WITH _raw AS (\r\n    SELECT *    \r\n    FROM {{ source('linkedin_ads', 'ad_analytics_by_campaign') }}\r\n),\r\n\r\n_renamed_columns AS (\r\n    SELECT\r\n        campaign_id,\r\n        day as Date,\r\n        _fivetran_synced,\r\n        action_clicks,\r\n        ad_unit_clicks,\r\n        approximate_unique_impressions,\r\n        card_clicks,\r\n        card_impressions,\r\n        clicks as Clicks,\r\n        comment_likes,\r\n        comments,\r\n        company_page_clicks,\r\n        conversion_value_in_local_currency,\r\n        cost_in_local_currency as Cost,\r\n        cost_in_usd,\r\n        external_website_conversions,\r\n        external_website_post_click_conversions,\r\n        external_website_post_view_conversions,\r\n        follows,\r\n        full_screen_plays,\r\n        impressions as Impressions,\r\n        landing_page_clicks,\r\n        lead_generation_mail_contact_info_shares,\r\n        lead_generation_mail_interested_clicks,\r\n        likes,\r\n        one_click_lead_form_opens,\r\n        one_click_leads,\r\n        opens,\r\n        other_engagements,\r\n        sends,\r\n        shares,\r\n        text_url_clicks,\r\n        total_engagements,\r\n        video_completions,\r\n        video_first_quartile_completions,\r\n        video_midpoint_completions,\r\n        video_starts,\r\n        video_third_quartile_completions,\r\n        video_views,\r\n        viral_card_clicks,\r\n        viral_card_impressions,\r\n        viral_clicks,\r\n        viral_comment_likes,\r\n        viral_comments,\r\n        viral_company_page_clicks,\r\n        viral_external_website_conversions,\r\n        viral_external_website_post_click_conversions,\r\n        viral_external_website_post_view_conversions,\r\n        viral_follows,\r\n        viral_full_screen_plays,\r\n        viral_impressions,\r\n        viral_landing_page_clicks,\r\n        viral_likes,\r\n        viral_one_click_lead_form_opens,\r\n        viral_one_click_leads,\r\n        viral_other_engagements,\r\n        viral_shares,\r\n        viral_total_engagements,\r\n        viral_video_completions,\r\n        viral_video_first_quartile_completions,\r\n        viral_video_midpoint_completions,\r\n        viral_video_starts,\r\n        viral_video_third_quartile_completions,\r\n        viral_video_views\r\n    FROM _raw\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _renamed_columns\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [], "sources": [["linkedin_ads", "ad_analytics_by_campaign"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bq_evo.linkedin_ads.ad_analytics_by_campaign"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\linkedin\\stg_linkedin_ad_analytics_by_campaign.sql", "compiled": true, "compiled_code": "WITH _raw AS (\n    SELECT *    \n    FROM `oss-big-query-dashboard-prod`.`linkedin_ads`.`ad_analytics_by_campaign`\n),\n\n_renamed_columns AS (\n    SELECT\n        campaign_id,\n        day as Date,\n        _fivetran_synced,\n        action_clicks,\n        ad_unit_clicks,\n        approximate_unique_impressions,\n        card_clicks,\n        card_impressions,\n        clicks as Clicks,\n        comment_likes,\n        comments,\n        company_page_clicks,\n        conversion_value_in_local_currency,\n        cost_in_local_currency as Cost,\n        cost_in_usd,\n        external_website_conversions,\n        external_website_post_click_conversions,\n        external_website_post_view_conversions,\n        follows,\n        full_screen_plays,\n        impressions as Impressions,\n        landing_page_clicks,\n        lead_generation_mail_contact_info_shares,\n        lead_generation_mail_interested_clicks,\n        likes,\n        one_click_lead_form_opens,\n        one_click_leads,\n        opens,\n        other_engagements,\n        sends,\n        shares,\n        text_url_clicks,\n        total_engagements,\n        video_completions,\n        video_first_quartile_completions,\n        video_midpoint_completions,\n        video_starts,\n        video_third_quartile_completions,\n        video_views,\n        viral_card_clicks,\n        viral_card_impressions,\n        viral_clicks,\n        viral_comment_likes,\n        viral_comments,\n        viral_company_page_clicks,\n        viral_external_website_conversions,\n        viral_external_website_post_click_conversions,\n        viral_external_website_post_view_conversions,\n        viral_follows,\n        viral_full_screen_plays,\n        viral_impressions,\n        viral_landing_page_clicks,\n        viral_likes,\n        viral_one_click_lead_form_opens,\n        viral_one_click_leads,\n        viral_other_engagements,\n        viral_shares,\n        viral_total_engagements,\n        viral_video_completions,\n        viral_video_first_quartile_completions,\n        viral_video_midpoint_completions,\n        viral_video_starts,\n        viral_video_third_quartile_completions,\n        viral_video_views\n    FROM _raw\n),\n\n_final AS(\n    SELECT *\n    FROM _renamed_columns\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.stg_linkedin_campaign_history": {"database": "oss-big-query-dashboard-prod", "schema": "staging", "name": "stg_linkedin_campaign_history", "resource_type": "model", "package_name": "bq_evo", "path": "staging\\linkedin\\stg_linkedin_campaign_history.sql", "original_file_path": "models\\staging\\linkedin\\stg_linkedin_campaign_history.sql", "unique_id": "model.bq_evo.stg_linkedin_campaign_history", "fqn": ["bq_evo", "staging", "linkedin", "stg_linkedin_campaign_history"], "alias": "stg_linkedin_campaign_history", "checksum": {"name": "sha256", "checksum": "fd7b1b5403ca0082892ba1d3ac99d20b43a2b9a12c16853b91fe5c93ee576def"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt alle Kampagneninformationen der Metakampagnen.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\staging\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "staging"}, "created_at": 1696938456.180894, "relation_name": "`oss-big-query-dashboard-prod`.`staging`.`stg_linkedin_campaign_history`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ source('linkedin_ads', 'campaign_history') }}\r\n),\r\n\r\n_renamed_columns AS(\r\n    SELECT\r\n        id,\r\n        last_modified_time,\r\n        _fivetran_synced,\r\n        account_id,\r\n        associated_entity,\r\n        audience_expansion_enabled,\r\n        campaign_group_id,\r\n        cost_type,\r\n        created_time,\r\n        creative_selection,\r\n        daily_budget_amount,\r\n        daily_budget_currency_code,\r\n        format,\r\n        locale_country,\r\n        locale_language,\r\n        name as Campaign,\r\n        objective_type,\r\n        offsite_delivery_enabled,\r\n        optimization_target_type,\r\n        run_schedule_end,\r\n        run_schedule_start,\r\n        status,\r\n        type,\r\n        unit_cost_amount,\r\n        unit_cost_currency_code,\r\n        version_tag\r\n    FROM _raw\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _renamed_columns\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [], "sources": [["linkedin_ads", "campaign_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bq_evo.linkedin_ads.campaign_history"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\linkedin\\stg_linkedin_campaign_history.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`linkedin_ads`.`campaign_history`\n),\n\n_renamed_columns AS(\n    SELECT\n        id,\n        last_modified_time,\n        _fivetran_synced,\n        account_id,\n        associated_entity,\n        audience_expansion_enabled,\n        campaign_group_id,\n        cost_type,\n        created_time,\n        creative_selection,\n        daily_budget_amount,\n        daily_budget_currency_code,\n        format,\n        locale_country,\n        locale_language,\n        name as Campaign,\n        objective_type,\n        offsite_delivery_enabled,\n        optimization_target_type,\n        run_schedule_end,\n        run_schedule_start,\n        status,\n        type,\n        unit_cost_amount,\n        unit_cost_currency_code,\n        version_tag\n    FROM _raw\n),\n\n_final AS(\n    SELECT *\n    FROM _renamed_columns\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.stg_meta_campaign_information": {"database": "oss-big-query-dashboard-prod", "schema": "staging", "name": "stg_meta_campaign_information", "resource_type": "model", "package_name": "bq_evo", "path": "staging\\meta\\stg_meta_campaign_information.sql", "original_file_path": "models\\staging\\meta\\stg_meta_campaign_information.sql", "unique_id": "model.bq_evo.stg_meta_campaign_information", "fqn": ["bq_evo", "staging", "meta", "stg_meta_campaign_information"], "alias": "stg_meta_campaign_information", "checksum": {"name": "sha256", "checksum": "771f9ec8113ed6b4281ef51557cae820473e61d6a0c9229c8f4b3585d3ed8c3f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt alle Kampagneninformationen der Metakampagnen. Inklusive Informationen \u00fcber zugeh\u00f6rige Anzeigengruppen und Anzeigen.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\staging\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "staging"}, "created_at": 1696938456.180894, "relation_name": "`oss-big-query-dashboard-prod`.`staging`.`stg_meta_campaign_information`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ source('facebook_ads', 'fb_campaign_information') }}\r\n),\r\n\r\n_renamed_columns AS(\r\n    SELECT \r\n        * EXCEPT (campaign_name),\r\n        campaign_name as Campaign\r\n    FROM _raw\r\n),\r\n\r\n_added_more_metadata AS(\r\n    SELECT \r\n        *,\r\n        'cpc' as Medium,\r\n        'EVO' as Partner,\r\n        CASE\r\n            WHEN Campaign LIKE '%:IG%' AND Campaign NOT LIKE '%:FB:IG:%' THEN 'instagram'\r\n            WHEN Campaign LIKE '%:FB:IG:%' OR Campaign LIKE '%:FB:%' THEN 'facebook'\r\n            ELSE '(not set)'\r\n        END AS Source,\r\n        'true' as IsPaid\r\n    FROM _renamed_columns\r\n),\r\n\r\n_added_campaignid AS(\r\n    SELECT\r\n        *,\r\n        LOWER (CONCAT(Campaign, Source, Medium, Partner)) as CampaignID\r\n    FROM _added_more_metadata\r\n),\r\n\r\n_final AS(\r\n    SELECT *\r\n    FROM _added_campaignid\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [], "sources": [["facebook_ads", "fb_campaign_information"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bq_evo.facebook_ads.fb_campaign_information"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\meta\\stg_meta_campaign_information.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`facebook_ads`.`fb_campaign_information`\n),\n\n_renamed_columns AS(\n    SELECT \n        * EXCEPT (campaign_name),\n        campaign_name as Campaign\n    FROM _raw\n),\n\n_added_more_metadata AS(\n    SELECT \n        *,\n        'cpc' as Medium,\n        'EVO' as Partner,\n        CASE\n            WHEN Campaign LIKE '%:IG%' AND Campaign NOT LIKE '%:FB:IG:%' THEN 'instagram'\n            WHEN Campaign LIKE '%:FB:IG:%' OR Campaign LIKE '%:FB:%' THEN 'facebook'\n            ELSE '(not set)'\n        END AS Source,\n        'true' as IsPaid\n    FROM _renamed_columns\n),\n\n_added_campaignid AS(\n    SELECT\n        *,\n        LOWER (CONCAT(Campaign, Source, Medium, Partner)) as CampaignID\n    FROM _added_more_metadata\n),\n\n_final AS(\n    SELECT *\n    FROM _added_campaignid\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.bq_evo.stg_meta_campaign_stats": {"database": "oss-big-query-dashboard-prod", "schema": "staging", "name": "stg_meta_campaign_stats", "resource_type": "model", "package_name": "bq_evo", "path": "staging\\meta\\stg_meta_campaign_stats.sql", "original_file_path": "models\\staging\\meta\\stg_meta_campaign_stats.sql", "unique_id": "model.bq_evo.stg_meta_campaign_stats", "fqn": ["bq_evo", "staging", "meta", "stg_meta_campaign_stats"], "alias": "stg_meta_campaign_stats", "checksum": {"name": "sha256", "checksum": "be07e857079b0781d4a8f7c5f704a945fc114343e861d332936439387c69e4d1"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Enth\u00e4lt alle Performancestatistiken der Metakampagnen. Enth\u00e4lt keine Conversioninformationen.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "bq_evo://models\\staging\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "view", "schema": "staging"}, "created_at": 1696938456.179903, "relation_name": "`oss-big-query-dashboard-prod`.`staging`.`stg_meta_campaign_stats`", "raw_code": "WITH _raw AS(\r\n    SELECT *\r\n    FROM {{ source('facebook_ads', 'fb_basic_performance_per_day') }}\r\n),\r\n\r\n_renamed_columns AS (\r\n    SELECT\r\n        _fivetran_id,\r\n        ad_id,\r\n        date as Date,\r\n        _fivetran_synced,\r\n        account_id,\r\n        adset_name,\r\n        campaign_name as Campaign,\r\n        clicks as Clicks,\r\n        cpc,\r\n        cpm,\r\n        ctr,\r\n        impressions as Impressions,\r\n        reach,\r\n        spend as Cost\r\n    FROM _raw\r\n),\r\n\r\n_final AS (\r\n    SELECT *    \r\n    FROM _renamed_columns\r\n)\r\n\r\nSELECT * FROM _final", "language": "sql", "refs": [], "sources": [["facebook_ads", "fb_basic_performance_per_day"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.bq_evo.facebook_ads.fb_basic_performance_per_day"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\meta\\stg_meta_campaign_stats.sql", "compiled": true, "compiled_code": "WITH _raw AS(\n    SELECT *\n    FROM `oss-big-query-dashboard-prod`.`facebook_ads`.`fb_basic_performance_per_day`\n),\n\n_renamed_columns AS (\n    SELECT\n        _fivetran_id,\n        ad_id,\n        date as Date,\n        _fivetran_synced,\n        account_id,\n        adset_name,\n        campaign_name as Campaign,\n        clicks as Clicks,\n        cpc,\n        cpm,\n        ctr,\n        impressions as Impressions,\n        reach,\n        spend as Cost\n    FROM _raw\n),\n\n_final AS (\n    SELECT *    \n    FROM _renamed_columns\n)\n\nSELECT * FROM _final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.bq_evo.unique_int_google_ads_unique_campaigns_CampaignID.0c01e64aee": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('int_google_ads_unique_campaigns')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "unique_int_google_ads_unique_campaigns_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "unique_int_google_ads_unique_campaigns_CampaignID.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bq_evo.unique_int_google_ads_unique_campaigns_CampaignID.0c01e64aee", "fqn": ["bq_evo", "intermediate", "unique_int_google_ads_unique_campaigns_CampaignID"], "alias": "unique_int_google_ads_unique_campaigns_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.1523325, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_google_ads_unique_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.int_google_ads_unique_campaigns"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\schema.yml\\unique_int_google_ads_unique_campaigns_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select CampaignID as unique_field\n  from `oss-big-query-dashboard-prod`.`intermediate`.`int_google_ads_unique_campaigns`\n  where CampaignID is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.int_google_ads_unique_campaigns", "attached_node": "model.bq_evo.int_google_ads_unique_campaigns"}, "test.bq_evo.not_null_int_google_ads_unique_campaigns_CampaignID.b78d28588f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('int_google_ads_unique_campaigns')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_int_google_ads_unique_campaigns_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_int_google_ads_unique_campaigns_CampaignID.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bq_evo.not_null_int_google_ads_unique_campaigns_CampaignID.b78d28588f", "fqn": ["bq_evo", "intermediate", "not_null_int_google_ads_unique_campaigns_CampaignID"], "alias": "not_null_int_google_ads_unique_campaigns_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.1533246, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_google_ads_unique_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.int_google_ads_unique_campaigns"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\schema.yml\\not_null_int_google_ads_unique_campaigns_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`intermediate`.`int_google_ads_unique_campaigns`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.int_google_ads_unique_campaigns", "attached_node": "model.bq_evo.int_google_ads_unique_campaigns"}, "test.bq_evo.not_null_int_google_ads_campaign_stats_CampaignID.2475301ffd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('int_google_ads_campaign_stats')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_int_google_ads_campaign_stats_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_int_google_ads_campaign_stats_CampaignID.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bq_evo.not_null_int_google_ads_campaign_stats_CampaignID.2475301ffd", "fqn": ["bq_evo", "intermediate", "not_null_int_google_ads_campaign_stats_CampaignID"], "alias": "not_null_int_google_ads_campaign_stats_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.1533246, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_google_ads_campaign_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.int_google_ads_campaign_stats"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\schema.yml\\not_null_int_google_ads_campaign_stats_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`intermediate`.`int_google_ads_campaign_stats`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.int_google_ads_campaign_stats", "attached_node": "model.bq_evo.int_google_ads_campaign_stats"}, "test.bq_evo.unique_int_bing_ads_unique_campaigns_CampaignID.32ece24906": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('int_bing_ads_unique_campaigns')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "unique_int_bing_ads_unique_campaigns_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "unique_int_bing_ads_unique_campaigns_CampaignID.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bq_evo.unique_int_bing_ads_unique_campaigns_CampaignID.32ece24906", "fqn": ["bq_evo", "intermediate", "unique_int_bing_ads_unique_campaigns_CampaignID"], "alias": "unique_int_bing_ads_unique_campaigns_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.15433, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_bing_ads_unique_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.int_bing_ads_unique_campaigns"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\schema.yml\\unique_int_bing_ads_unique_campaigns_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select CampaignID as unique_field\n  from `oss-big-query-dashboard-prod`.`intermediate`.`int_bing_ads_unique_campaigns`\n  where CampaignID is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.int_bing_ads_unique_campaigns", "attached_node": "model.bq_evo.int_bing_ads_unique_campaigns"}, "test.bq_evo.not_null_int_bing_ads_unique_campaigns_CampaignID.5214e7b227": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('int_bing_ads_unique_campaigns')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_int_bing_ads_unique_campaigns_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_int_bing_ads_unique_campaigns_CampaignID.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bq_evo.not_null_int_bing_ads_unique_campaigns_CampaignID.5214e7b227", "fqn": ["bq_evo", "intermediate", "not_null_int_bing_ads_unique_campaigns_CampaignID"], "alias": "not_null_int_bing_ads_unique_campaigns_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.155318, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_bing_ads_unique_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.int_bing_ads_unique_campaigns"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\schema.yml\\not_null_int_bing_ads_unique_campaigns_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`intermediate`.`int_bing_ads_unique_campaigns`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.int_bing_ads_unique_campaigns", "attached_node": "model.bq_evo.int_bing_ads_unique_campaigns"}, "test.bq_evo.not_null_int_bing_ads_campaign_performance_joined_campaign_names_CampaignID.5c326b9422": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('int_bing_ads_campaign_performance_joined_campaign_names')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_int_bing_ads_campaign_performance_joined_campaign_names_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_int_bing_ads_campaign_a26c247148c9c50c32fef267b404d3e7.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bq_evo.not_null_int_bing_ads_campaign_performance_joined_campaign_names_CampaignID.5c326b9422", "fqn": ["bq_evo", "intermediate", "not_null_int_bing_ads_campaign_performance_joined_campaign_names_CampaignID"], "alias": "not_null_int_bing_ads_campaign_a26c247148c9c50c32fef267b404d3e7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_bing_ads_campaign_a26c247148c9c50c32fef267b404d3e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_bing_ads_campaign_a26c247148c9c50c32fef267b404d3e7"}, "created_at": 1696938456.1563253, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_bing_ads_campaign_a26c247148c9c50c32fef267b404d3e7\") }}", "language": "sql", "refs": [{"name": "int_bing_ads_campaign_performance_joined_campaign_names", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.int_bing_ads_campaign_performance_joined_campaign_names"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\schema.yml\\not_null_int_bing_ads_campaign_a26c247148c9c50c32fef267b404d3e7.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`intermediate`.`int_bing_ads_campaign_performance_joined_campaign_names`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.int_bing_ads_campaign_performance_joined_campaign_names", "attached_node": "model.bq_evo.int_bing_ads_campaign_performance_joined_campaign_names"}, "test.bq_evo.not_null_int_google_analytics_all_events_CampaignID.3357413cd2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('int_google_analytics_all_events')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_int_google_analytics_all_events_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_int_google_analytics_all_events_CampaignID.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bq_evo.not_null_int_google_analytics_all_events_CampaignID.3357413cd2", "fqn": ["bq_evo", "intermediate", "not_null_int_google_analytics_all_events_CampaignID"], "alias": "not_null_int_google_analytics_all_events_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.158223, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_google_analytics_all_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.int_google_analytics_all_events"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\schema.yml\\not_null_int_google_analytics_all_events_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_all_events`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.int_google_analytics_all_events", "attached_node": "model.bq_evo.int_google_analytics_all_events"}, "test.bq_evo.not_null_int_google_analytics_all_campaigns_CampaignID.1e0bcee97c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('int_google_analytics_all_campaigns')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_int_google_analytics_all_campaigns_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_int_google_analytics_all_campaigns_CampaignID.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bq_evo.not_null_int_google_analytics_all_campaigns_CampaignID.1e0bcee97c", "fqn": ["bq_evo", "intermediate", "not_null_int_google_analytics_all_campaigns_CampaignID"], "alias": "not_null_int_google_analytics_all_campaigns_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.158223, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_google_analytics_all_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.int_google_analytics_all_campaigns"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\schema.yml\\not_null_int_google_analytics_all_campaigns_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_all_campaigns`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.int_google_analytics_all_campaigns", "attached_node": "model.bq_evo.int_google_analytics_all_campaigns"}, "test.bq_evo.not_null_int_google_analytics_NDG_conversionevents_GA4_CampaignID.a44c364cf4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('int_google_analytics_NDG_conversionevents_GA4')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_int_google_analytics_NDG_conversionevents_GA4_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_int_google_analytics__37e47ab77e0012b5e345f38926bd44c5.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bq_evo.not_null_int_google_analytics_NDG_conversionevents_GA4_CampaignID.a44c364cf4", "fqn": ["bq_evo", "intermediate", "not_null_int_google_analytics_NDG_conversionevents_GA4_CampaignID"], "alias": "not_null_int_google_analytics__37e47ab77e0012b5e345f38926bd44c5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_google_analytics__37e47ab77e0012b5e345f38926bd44c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_google_analytics__37e47ab77e0012b5e345f38926bd44c5"}, "created_at": 1696938456.1592214, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_google_analytics__37e47ab77e0012b5e345f38926bd44c5\") }}", "language": "sql", "refs": [{"name": "int_google_analytics_NDG_conversionevents_GA4", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.int_google_analytics_NDG_conversionevents_GA4"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\schema.yml\\not_null_int_google_analytics__37e47ab77e0012b5e345f38926bd44c5.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_NDG_conversionevents_GA4`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.int_google_analytics_NDG_conversionevents_GA4", "attached_node": "model.bq_evo.int_google_analytics_NDG_conversionevents_GA4"}, "test.bq_evo.not_null_int_google_analytics_NDG_conversionevents_GA4_ZielvorhabenID.4bb5cb583c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ZielvorhabenID", "model": "{{ get_where_subquery(ref('int_google_analytics_NDG_conversionevents_GA4')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_int_google_analytics_NDG_conversionevents_GA4_ZielvorhabenID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_int_google_analytics__822ceb9495991982a83659b65c038d02.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bq_evo.not_null_int_google_analytics_NDG_conversionevents_GA4_ZielvorhabenID.4bb5cb583c", "fqn": ["bq_evo", "intermediate", "not_null_int_google_analytics_NDG_conversionevents_GA4_ZielvorhabenID"], "alias": "not_null_int_google_analytics__822ceb9495991982a83659b65c038d02", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_google_analytics__822ceb9495991982a83659b65c038d02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_google_analytics__822ceb9495991982a83659b65c038d02"}, "created_at": 1696938456.1602218, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_google_analytics__822ceb9495991982a83659b65c038d02\") }}", "language": "sql", "refs": [{"name": "int_google_analytics_NDG_conversionevents_GA4", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.int_google_analytics_NDG_conversionevents_GA4"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\schema.yml\\not_null_int_google_analytics__822ceb9495991982a83659b65c038d02.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ZielvorhabenID\nfrom `oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_NDG_conversionevents_GA4`\nwhere ZielvorhabenID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "ZielvorhabenID", "file_key_name": "models.int_google_analytics_NDG_conversionevents_GA4", "attached_node": "model.bq_evo.int_google_analytics_NDG_conversionevents_GA4"}, "test.bq_evo.not_null_int_google_analytics_all_purchases_GA4_CampaignID.2cf6a5e64e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('int_google_analytics_all_purchases_GA4')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_int_google_analytics_all_purchases_GA4_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_int_google_analytics_all_purchases_GA4_CampaignID.sql", "original_file_path": "models\\intermediate\\schema.yml", "unique_id": "test.bq_evo.not_null_int_google_analytics_all_purchases_GA4_CampaignID.2cf6a5e64e", "fqn": ["bq_evo", "intermediate", "not_null_int_google_analytics_all_purchases_GA4_CampaignID"], "alias": "not_null_int_google_analytics_all_purchases_GA4_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.1612217, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_google_analytics_all_purchases_GA4", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.int_google_analytics_all_purchases_GA4"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\intermediate\\schema.yml\\not_null_int_google_analytics_all_purchases_GA4_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`intermediate`.`int_google_analytics_all_purchases_GA4`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.int_google_analytics_all_purchases_GA4", "attached_node": "model.bq_evo.int_google_analytics_all_purchases_GA4"}, "test.bq_evo.not_null_mrt_google_ads_basic_campaign_stats_CampaignID.8f7cf788ca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('mrt_google_ads_basic_campaign_stats')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_mrt_google_ads_basic_campaign_stats_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_mrt_google_ads_basic_campaign_stats_CampaignID.sql", "original_file_path": "models\\mart\\schema.yml", "unique_id": "test.bq_evo.not_null_mrt_google_ads_basic_campaign_stats_CampaignID.8f7cf788ca", "fqn": ["bq_evo", "mart", "not_null_mrt_google_ads_basic_campaign_stats_CampaignID"], "alias": "not_null_mrt_google_ads_basic_campaign_stats_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.1652215, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mrt_google_ads_basic_campaign_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.mrt_google_ads_basic_campaign_stats"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\schema.yml\\not_null_mrt_google_ads_basic_campaign_stats_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`mart`.`mrt_google_ads_basic_campaign_stats`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.mrt_google_ads_basic_campaign_stats", "attached_node": "model.bq_evo.mrt_google_ads_basic_campaign_stats"}, "test.bq_evo.not_null_mrt_bing_ads_basic_campaign_stats_CampaignID.e363f600db": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('mrt_bing_ads_basic_campaign_stats')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_mrt_bing_ads_basic_campaign_stats_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_mrt_bing_ads_basic_campaign_stats_CampaignID.sql", "original_file_path": "models\\mart\\schema.yml", "unique_id": "test.bq_evo.not_null_mrt_bing_ads_basic_campaign_stats_CampaignID.e363f600db", "fqn": ["bq_evo", "mart", "not_null_mrt_bing_ads_basic_campaign_stats_CampaignID"], "alias": "not_null_mrt_bing_ads_basic_campaign_stats_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.1662216, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mrt_bing_ads_basic_campaign_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.mrt_bing_ads_basic_campaign_stats"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\schema.yml\\not_null_mrt_bing_ads_basic_campaign_stats_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`mart`.`mrt_bing_ads_basic_campaign_stats`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.mrt_bing_ads_basic_campaign_stats", "attached_node": "model.bq_evo.mrt_bing_ads_basic_campaign_stats"}, "test.bq_evo.not_null_mrt_google_analytics_campaign_webperformance_CampaignID.6c662f597a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('mrt_google_analytics_campaign_webperformance')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_mrt_google_analytics_campaign_webperformance_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_mrt_google_analytics__de1d0576e762f018128331a69043a76f.sql", "original_file_path": "models\\mart\\schema.yml", "unique_id": "test.bq_evo.not_null_mrt_google_analytics_campaign_webperformance_CampaignID.6c662f597a", "fqn": ["bq_evo", "mart", "not_null_mrt_google_analytics_campaign_webperformance_CampaignID"], "alias": "not_null_mrt_google_analytics__de1d0576e762f018128331a69043a76f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_mrt_google_analytics__de1d0576e762f018128331a69043a76f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_mrt_google_analytics__de1d0576e762f018128331a69043a76f"}, "created_at": 1696938456.1672215, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_mrt_google_analytics__de1d0576e762f018128331a69043a76f\") }}", "language": "sql", "refs": [{"name": "mrt_google_analytics_campaign_webperformance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.mrt_google_analytics_campaign_webperformance"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\schema.yml\\not_null_mrt_google_analytics__de1d0576e762f018128331a69043a76f.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`mart`.`mrt_google_analytics_campaign_webperformance`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.mrt_google_analytics_campaign_webperformance", "attached_node": "model.bq_evo.mrt_google_analytics_campaign_webperformance"}, "test.bq_evo.not_null_mrt_meta_basic_campaign_stats_CampaignID.0fbc779058": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('mrt_meta_basic_campaign_stats')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_mrt_meta_basic_campaign_stats_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_mrt_meta_basic_campaign_stats_CampaignID.sql", "original_file_path": "models\\mart\\schema.yml", "unique_id": "test.bq_evo.not_null_mrt_meta_basic_campaign_stats_CampaignID.0fbc779058", "fqn": ["bq_evo", "mart", "not_null_mrt_meta_basic_campaign_stats_CampaignID"], "alias": "not_null_mrt_meta_basic_campaign_stats_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.168221, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mrt_meta_basic_campaign_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.mrt_meta_basic_campaign_stats"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\schema.yml\\not_null_mrt_meta_basic_campaign_stats_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`mart`.`mrt_meta_basic_campaign_stats`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.mrt_meta_basic_campaign_stats", "attached_node": "model.bq_evo.mrt_meta_basic_campaign_stats"}, "test.bq_evo.not_null_mrt_linkedin_basic_campaign_stats_CampaignID.b7d4e54502": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('mrt_linkedin_basic_campaign_stats')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_mrt_linkedin_basic_campaign_stats_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_mrt_linkedin_basic_campaign_stats_CampaignID.sql", "original_file_path": "models\\mart\\schema.yml", "unique_id": "test.bq_evo.not_null_mrt_linkedin_basic_campaign_stats_CampaignID.b7d4e54502", "fqn": ["bq_evo", "mart", "not_null_mrt_linkedin_basic_campaign_stats_CampaignID"], "alias": "not_null_mrt_linkedin_basic_campaign_stats_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.168221, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mrt_linkedin_basic_campaign_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.mrt_linkedin_basic_campaign_stats"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\schema.yml\\not_null_mrt_linkedin_basic_campaign_stats_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`mart`.`mrt_linkedin_basic_campaign_stats`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.mrt_linkedin_basic_campaign_stats", "attached_node": "model.bq_evo.mrt_linkedin_basic_campaign_stats"}, "test.bq_evo.not_null_mrt_metainformation_campaigns_CampaignID.edc657ac09": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CampaignID", "model": "{{ get_where_subquery(ref('mrt_metainformation_campaigns')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_mrt_metainformation_campaigns_CampaignID", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_mrt_metainformation_campaigns_CampaignID.sql", "original_file_path": "models\\mart\\schema.yml", "unique_id": "test.bq_evo.not_null_mrt_metainformation_campaigns_CampaignID.edc657ac09", "fqn": ["bq_evo", "mart", "not_null_mrt_metainformation_campaigns_CampaignID"], "alias": "not_null_mrt_metainformation_campaigns_CampaignID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.1692214, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mrt_metainformation_campaigns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.mrt_metainformation_campaigns"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\mart\\schema.yml\\not_null_mrt_metainformation_campaigns_CampaignID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CampaignID\nfrom `oss-big-query-dashboard-prod`.`mart`.`mrt_metainformation_campaigns`\nwhere CampaignID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "CampaignID", "file_key_name": "models.mrt_metainformation_campaigns", "attached_node": "model.bq_evo.mrt_metainformation_campaigns"}, "test.bq_evo.not_null_stg_google_ads_campaign_stats_id.8e70867b27": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_google_ads_campaign_stats')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_stg_google_ads_campaign_stats_id", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_stg_google_ads_campaign_stats_id.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bq_evo.not_null_stg_google_ads_campaign_stats_id.8e70867b27", "fqn": ["bq_evo", "staging", "not_null_stg_google_ads_campaign_stats_id"], "alias": "not_null_stg_google_ads_campaign_stats_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.180894, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_google_ads_campaign_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.stg_google_ads_campaign_stats"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\schema.yml\\not_null_stg_google_ads_campaign_stats_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `oss-big-query-dashboard-prod`.`staging`.`stg_google_ads_campaign_stats`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_google_ads_campaign_stats", "attached_node": "model.bq_evo.stg_google_ads_campaign_stats"}, "test.bq_evo.not_null_stg_google_ads_campaign_history_id.c1e39bce7d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_google_ads_campaign_history')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_stg_google_ads_campaign_history_id", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_stg_google_ads_campaign_history_id.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bq_evo.not_null_stg_google_ads_campaign_history_id.c1e39bce7d", "fqn": ["bq_evo", "staging", "not_null_stg_google_ads_campaign_history_id"], "alias": "not_null_stg_google_ads_campaign_history_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.181899, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_google_ads_campaign_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.stg_google_ads_campaign_history"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\schema.yml\\not_null_stg_google_ads_campaign_history_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `oss-big-query-dashboard-prod`.`staging`.`stg_google_ads_campaign_history`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_google_ads_campaign_history", "attached_node": "model.bq_evo.stg_google_ads_campaign_history"}, "test.bq_evo.not_null_stg_bing_ads_campaign_history_id.982e0ed0a8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_bing_ads_campaign_history')) }}"}, "namespace": null}, "database": "oss-big-query-dashboard-prod", "schema": "dbt_test__audit", "name": "not_null_stg_bing_ads_campaign_history_id", "resource_type": "test", "package_name": "bq_evo", "path": "not_null_stg_bing_ads_campaign_history_id.sql", "original_file_path": "models\\staging\\schema.yml", "unique_id": "test.bq_evo.not_null_stg_bing_ads_campaign_history_id.982e0ed0a8", "fqn": ["bq_evo", "staging", "not_null_stg_bing_ads_campaign_history_id"], "alias": "not_null_stg_bing_ads_campaign_history_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1696938456.1828935, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_bing_ads_campaign_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.bq_evo.stg_bing_ads_campaign_history"]}, "compiled_path": "target\\compiled\\bq_evo\\models\\staging\\schema.yml\\not_null_stg_bing_ads_campaign_history_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `oss-big-query-dashboard-prod`.`staging`.`stg_bing_ads_campaign_history`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_bing_ads_campaign_history", "attached_node": "model.bq_evo.stg_bing_ads_campaign_history"}}, "sources": {"source.bq_evo.analytics_352128287.events": {"database": "oss-big-query-dashboard-prod", "schema": "analytics_352128287", "name": "events", "resource_type": "source", "package_name": "bq_evo", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.bq_evo.analytics_352128287.events", "fqn": ["bq_evo", "analytics_352128287", "events"], "source_name": "analytics_352128287", "source_description": "alle GA4 Daten NEW", "loader": "", "identifier": "events_*", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`oss-big-query-dashboard-prod`.`analytics_352128287`.`events_*`", "created_at": 1696938456.183897}, "source.bq_evo.google_ads.campaign_history": {"database": "oss-big-query-dashboard-prod", "schema": "google_ads", "name": "campaign_history", "resource_type": "source", "package_name": "bq_evo", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.bq_evo.google_ads.campaign_history", "fqn": ["bq_evo", "google_ads", "campaign_history"], "source_name": "google_ads", "source_description": "alle Google Ads Daten Klick & NEW", "loader": "", "identifier": "campaign_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`oss-big-query-dashboard-prod`.`google_ads`.`campaign_history`", "created_at": 1696938456.183897}, "source.bq_evo.google_ads.campaign_stats": {"database": "oss-big-query-dashboard-prod", "schema": "google_ads", "name": "campaign_stats", "resource_type": "source", "package_name": "bq_evo", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.bq_evo.google_ads.campaign_stats", "fqn": ["bq_evo", "google_ads", "campaign_stats"], "source_name": "google_ads", "source_description": "alle Google Ads Daten Klick & NEW", "loader": "", "identifier": "campaign_stats", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`oss-big-query-dashboard-prod`.`google_ads`.`campaign_stats`", "created_at": 1696938456.183897}, "source.bq_evo.bingads.campaign_performance_daily_report": {"database": "oss-big-query-dashboard-prod", "schema": "bingads", "name": "campaign_performance_daily_report", "resource_type": "source", "package_name": "bq_evo", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.bq_evo.bingads.campaign_performance_daily_report", "fqn": ["bq_evo", "bingads", "campaign_performance_daily_report"], "source_name": "bingads", "source_description": "Alle Bing Ads Daten", "loader": "", "identifier": "campaign_performance_daily_report", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`oss-big-query-dashboard-prod`.`bingads`.`campaign_performance_daily_report`", "created_at": 1696938456.183897}, "source.bq_evo.bingads.campaign_history": {"database": "oss-big-query-dashboard-prod", "schema": "bingads", "name": "campaign_history", "resource_type": "source", "package_name": "bq_evo", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.bq_evo.bingads.campaign_history", "fqn": ["bq_evo", "bingads", "campaign_history"], "source_name": "bingads", "source_description": "Alle Bing Ads Daten", "loader": "", "identifier": "campaign_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`oss-big-query-dashboard-prod`.`bingads`.`campaign_history`", "created_at": 1696938456.183897}, "source.bq_evo.facebook_ads.fb_basic_performance_per_day": {"database": "oss-big-query-dashboard-prod", "schema": "facebook_ads", "name": "fb_basic_performance_per_day", "resource_type": "source", "package_name": "bq_evo", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.bq_evo.facebook_ads.fb_basic_performance_per_day", "fqn": ["bq_evo", "facebook_ads", "fb_basic_performance_per_day"], "source_name": "facebook_ads", "source_description": "alle Daten Meta", "loader": "", "identifier": "fb_basic_performance_per_day", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`oss-big-query-dashboard-prod`.`facebook_ads`.`fb_basic_performance_per_day`", "created_at": 1696938456.183897}, "source.bq_evo.facebook_ads.fb_campaign_information": {"database": "oss-big-query-dashboard-prod", "schema": "facebook_ads", "name": "fb_campaign_information", "resource_type": "source", "package_name": "bq_evo", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.bq_evo.facebook_ads.fb_campaign_information", "fqn": ["bq_evo", "facebook_ads", "fb_campaign_information"], "source_name": "facebook_ads", "source_description": "alle Daten Meta", "loader": "", "identifier": "fb_campaign_information", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`oss-big-query-dashboard-prod`.`facebook_ads`.`fb_campaign_information`", "created_at": 1696938456.1848996}, "source.bq_evo.linkedin_ads.ad_analytics_by_campaign": {"database": "oss-big-query-dashboard-prod", "schema": "linkedin_ads", "name": "ad_analytics_by_campaign", "resource_type": "source", "package_name": "bq_evo", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.bq_evo.linkedin_ads.ad_analytics_by_campaign", "fqn": ["bq_evo", "linkedin_ads", "ad_analytics_by_campaign"], "source_name": "linkedin_ads", "source_description": "alle Daten LinkedIn", "loader": "", "identifier": "ad_analytics_by_campaign", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`oss-big-query-dashboard-prod`.`linkedin_ads`.`ad_analytics_by_campaign`", "created_at": 1696938456.1848996}, "source.bq_evo.linkedin_ads.campaign_history": {"database": "oss-big-query-dashboard-prod", "schema": "linkedin_ads", "name": "campaign_history", "resource_type": "source", "package_name": "bq_evo", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.bq_evo.linkedin_ads.campaign_history", "fqn": ["bq_evo", "linkedin_ads", "campaign_history"], "source_name": "linkedin_ads", "source_description": "alle Daten LinkedIn", "loader": "", "identifier": "campaign_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`oss-big-query-dashboard-prod`.`linkedin_ads`.`campaign_history`", "created_at": 1696938456.1848996}, "source.bq_evo.manual_data_upload.universal_analytics_historic_campaigns": {"database": "oss-big-query-dashboard-prod", "schema": "manual_data_upload", "name": "universal_analytics_historic_campaigns", "resource_type": "source", "package_name": "bq_evo", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.bq_evo.manual_data_upload.universal_analytics_historic_campaigns", "fqn": ["bq_evo", "manual_data_upload", "universal_analytics_historic_campaigns"], "source_name": "manual_data_upload", "source_description": "enth\u00e4lt einmalig hochgeladene Daten, insb. historische Informationen", "loader": "", "identifier": "universal_analytics_historic_campaigns", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`oss-big-query-dashboard-prod`.`manual_data_upload`.`universal_analytics_historic_campaigns`", "created_at": 1696938456.1848996}, "source.bq_evo.manual_data_upload.universal_analytics_historic_goal_conversions": {"database": "oss-big-query-dashboard-prod", "schema": "manual_data_upload", "name": "universal_analytics_historic_goal_conversions", "resource_type": "source", "package_name": "bq_evo", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.bq_evo.manual_data_upload.universal_analytics_historic_goal_conversions", "fqn": ["bq_evo", "manual_data_upload", "universal_analytics_historic_goal_conversions"], "source_name": "manual_data_upload", "source_description": "enth\u00e4lt einmalig hochgeladene Daten, insb. historische Informationen", "loader": "", "identifier": "universal_analytics_historic_goal_conversions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`oss-big-query-dashboard-prod`.`manual_data_upload`.`universal_analytics_historic_goal_conversions`", "created_at": 1696938456.1848996}, "source.bq_evo.manual_data_upload.universal_analytics_historic_transactions": {"database": "oss-big-query-dashboard-prod", "schema": "manual_data_upload", "name": "universal_analytics_historic_transactions", "resource_type": "source", "package_name": "bq_evo", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.bq_evo.manual_data_upload.universal_analytics_historic_transactions", "fqn": ["bq_evo", "manual_data_upload", "universal_analytics_historic_transactions"], "source_name": "manual_data_upload", "source_description": "enth\u00e4lt einmalig hochgeladene Daten, insb. historische Informationen", "loader": "", "identifier": "universal_analytics_historic_transactions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`oss-big-query-dashboard-prod`.`manual_data_upload`.`universal_analytics_historic_transactions`", "created_at": 1696938456.1848996}}, "macros": {"macro.bq_evo.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "bq_evo", "path": "macros\\generate_schema.sql", "original_file_path": "macros\\generate_schema.sql", "unique_id": "macro.bq_evo.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is none -%}\r\n\r\n        {{ default_schema }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_schema_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7303379, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7343395, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7353518, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7353518, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7353518, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7372754, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7383432, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7383432, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7383432, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7383432, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7393513, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7393513, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7393513, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7393513, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7393513, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7393513, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7403378, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7403378, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7412386, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7412386, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7412386, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7423472, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7443576, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7453425, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7453425, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7453425, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7463472, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7463472, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7463472, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7463472, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7463472, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\copy.sql", "original_file_path": "macros\\materializations\\copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7473524, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7493393, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7493393, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7503467, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7513397, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7543523, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7553453, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7553453, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7553453, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.756351, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.756351, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.756351, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7593365, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7593365, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7603433, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7603433, "supported_languages": ["sql"]}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\common.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7613392, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7623422, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7633364, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7643318, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7653377, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7653377, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.766346, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\merge.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7672367, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.769342, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.769342, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.769342, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7703395, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7703395, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7703395, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7703395, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7713525, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7713525, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7713525, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7713525, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7723403, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7723403, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7723403, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7723403, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7733433, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7742372, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7742372, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7742372, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7742372, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7752821, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7752821, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7752821, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7752821, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7752821, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7763479, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7763479, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7763479, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7763479, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7782347, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7782347, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7782347, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7782347, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7782347, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7792354, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7792354, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7792354, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7792354, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7792354, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7792354, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.780235, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.780235, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.780235, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.781235, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.781235, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.782235, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7832346, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7832346, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7842345, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7852361, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7852361, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7852361, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.786236, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.786236, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.786236, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7873425, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7873425, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7882364, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7882364, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7892346, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\drop_relation.sql", "original_file_path": "macros\\adapters\\drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7892346, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\drop_relation.sql", "original_file_path": "macros\\adapters\\drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7912366, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\drop_relation.sql", "original_file_path": "macros\\adapters\\drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7912366, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\drop_relation.sql", "original_file_path": "macros\\adapters\\drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7912366, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\drop_relation.sql", "original_file_path": "macros\\adapters\\drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7912366, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\drop_relation.sql", "original_file_path": "macros\\adapters\\drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7912366, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\drop_relation.sql", "original_file_path": "macros\\adapters\\drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7912366, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\drop_relation.sql", "original_file_path": "macros\\adapters\\drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7912366, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.792237, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.792237, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7932363, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7932363, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7932363, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.794236, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.794236, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.794236, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.794236, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.794236, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7952397, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.796239, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.796239, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.796239, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.796239, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.796239, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7972386, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7972386, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7972386, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7972386, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7982404, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7982404, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7982404, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.7982404, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.799239, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.799239, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.801365, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.801365, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.801365, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8023543, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8023543, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8023543, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8023543, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8033524, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8033524, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8033524, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8033524, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8043523, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8043523, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8043523, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8043523, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8053555, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8053555, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8053555, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8053555, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8062966, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8062966, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8062966, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8062966, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8062966, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8062966, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8062966, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8072395, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8072395, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8072395, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.808257, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8098733, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8109865, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8109865, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8119948, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.812995, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.812995, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8139873, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8139873, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8139873, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8139873, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8149922, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8149922, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8149922, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8159902, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8159902, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8168814, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8168814, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8168814, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8168814, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8179793, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8189847, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8189847, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8189847, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8189847, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8189847, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8189847, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8189847, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8219836, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8219836, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8219836, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8238773, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8238773, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8249745, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8249745, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8259873, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8299818, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8299818, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.833982, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8359754, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8359754, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8369853, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8369853, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.837976, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8411257, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8431358, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8441355, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8441355, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8451352, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8451352, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8451352, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8461354, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8461354, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8461354, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8461354, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8461354, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8471353, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8471353, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8471353, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\alter_materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8482401, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\alter_materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8482401, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\create_materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8482401, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\create_materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8482401, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\get_materialized_view_configuration_changes.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8492415, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\get_materialized_view_configuration_changes.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8492415, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8522363, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8522363, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.853245, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8542495, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8542495, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8552463, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\refresh_materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8552463, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\refresh_materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8552463, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\replace_materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8552463, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view\\replace_materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view\\replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8561757, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8561757, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8571322, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8571322, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8582478, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8582478, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8592584, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8592584, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8602548, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8602548, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8602548, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8612545, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8612545, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8622534, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8622534, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8622534, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8651326, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8661323, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8661323, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8671322, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8671322, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8671322, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8681858, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8681858, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8702474, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8732462, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.874134, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.874134, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8752549, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8752549, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8752549, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8752549, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8752549, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8762486, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8762486, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8762486, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8762486, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8782444, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8802488, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.883243, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.883243, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.883243, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.883243, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.883243, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.883243, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8842347, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8842347, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8852396, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8852396, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8852396, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8902476, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8902476, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8902476, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8931828, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8931828, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8942447, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8942447, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8942447, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8942447, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8963523, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8973513, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8973513, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.8973513, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.899368, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.899368, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.900357, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.901354, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.901354, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9023564, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9023564, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9023564, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9033623, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9033623, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9033623, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9033623, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9033623, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9043574, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9043574, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9043574, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9043574, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9053643, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9053643, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9053643, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9053643, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9053643, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9053643, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9062889, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9062889, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9073138, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9073138, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9073138, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9073138, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9073138, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9073138, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9083154, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9083154, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9083154, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9083154, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9083154, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9083154, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9083154, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.909936, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.909936, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.909936, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.909936, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.909936, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.909936, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9110503, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9110503, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9110503, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9110503, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9110503, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9120498, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9120498, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9120498, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9120498, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9120498, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9120498, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9130456, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9130456, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9130456, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9142542, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9142542, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9142542, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9152663, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9152663, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9152663, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9152663, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9152663, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9162648, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9162648, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9162648, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9162648, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9172652, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9172652, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9172652, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9172652, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9183772, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1696938455.9183772, "supported_languages": null}}, "docs": {"doc.bq_evo.campaignID": {"name": "campaignID", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.campaignID", "block_contents": "Wichtigster Schl\u00fcssel f\u00fcr NDG - setzt sich aus Medium, Source, Partner & Kampagnenname zusammen. Darf niemals leeren Wert enthalten.\r\n\r\nPrim\u00e4rschl\u00fcssel in folgenden Tabelle:\r\n- mrt_metainformation_campaigns\r\n- stg_google_analytics_352128287\r\n- int_google_ads_unique_campaigns\r\n- int_bing_ads_unique_campaigns\r\n- int_google_analytics_all_campaigns"}, "doc.bq_evo.Partner": {"name": "Partner", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.Partner", "block_contents": "Ist immer EVO, darf keine leeren Werte enthalten. Kann zuk\u00fcnftig zur Differenzierung mehrerer Marken genutzt werden."}, "doc.bq_evo.ad_account": {"name": "ad_account", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.ad_account", "block_contents": "ID des Werbekontos"}, "doc.bq_evo.cost": {"name": "cost", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.cost", "block_contents": "Kosten in Euro"}, "doc.bq_evo.clicks": {"name": "clicks", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.clicks", "block_contents": "Anzeigenklicks"}, "doc.bq_evo.impressions": {"name": "impressions", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.impressions", "block_contents": "Anzeigenimpressionen"}, "doc.bq_evo.fivetran": {"name": "fivetran", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.fivetran", "block_contents": "Automatisch durch Fivetran generierte Spalte. Kann zu Logging-Zwecken genutzt werden."}, "doc.bq_evo.unused_columns": {"name": "unused_columns", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.unused_columns", "block_contents": "Spaltenbedeutung bitte in API-Dokumentation nachpr\u00fcfen."}, "doc.bq_evo.device": {"name": "device", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.device", "block_contents": "Ger\u00e4t \u00fcber das das Event generiert wurde (bspw. Anzeigenklick oder Sitzungsbeginn)"}, "doc.bq_evo.campaign_name": {"name": "campaign_name", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.campaign_name", "block_contents": "Kampagnenname wie in der jeweiligen Nutzeroberfl\u00e4che angezeigt."}, "doc.bq_evo.source_medium_manual": {"name": "source_medium_manual", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.source_medium_manual", "block_contents": "Manuell durch NDG gesetzt Quelle/Medium."}, "doc.bq_evo.keyword": {"name": "keyword", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.keyword", "block_contents": "Aufgrund enormer Speicherauswirkungen wird die Spalte aus den Datenquellen nicht bezogen. Enth\u00e4lt daher zum Status-Quo keine Informationen (19.09.2023)."}, "doc.bq_evo.KeywordMatchType": {"name": "KeywordMatchType", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\column_descriptions.md", "original_file_path": "models\\documentations\\column_descriptions.md", "unique_id": "doc.bq_evo.KeywordMatchType", "block_contents": "Aufgrund enormer Speicherauswirkungen wird die Spalte aus den Datenquellen nicht bezogen. Enth\u00e4lt daher zum Status-Quo keine Informationen (19.09.2023)."}, "doc.bq_evo.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\general.md", "original_file_path": "models\\documentations\\general.md", "unique_id": "doc.bq_evo.__overview__", "block_contents": "# Willkommen! \r\n\r\nWillkommen zur Dokumentation der Data-Pipeline der EVO.\r\n\r\n# Ansprechpartner\r\n**Benedict Altgassen:** benedict.altgassen@nextdigital.de\r\n\r\n# Informationen zur Strukturierung der Modelle\r\n**Staging:**\r\n\r\nAlle Modelle im Staging-Ordner/-Dataset enthalten die Daten der Rohdatenquellen mit minimalen Anpassungen.\r\nHier werden lediglich Anpassungen an Spaltenbezeichnungen vorgenommen oder wie bei Google Analytics 4 vorbereitende Transformationen, um die Quelldaten in ein besser handhabbares Format zu bringen.\r\nDie Unterordner sind nach den Quelldaten-Systemen strukturiert. Auch zuk\u00fcnftige Datenquellen wie bspw. das Admin-Tool erhalten einen separaten Unterordner erhalten.\r\n**Die Modelle sind nicht f\u00fcr die Verwendung in Reportings, Dashboards oder Ad-Hoc-Analysen gedacht.**\r\n\r\n**Intermediate:**\r\n\r\nAlle Modelle im Intermediate-Ordner/-Dataset enthalten gg\u00fc. den Staging-Modellen weitreichende Verfeinerungen. Es werden Datenbereinigungen vorgenommen, Gruppierungen sowie Joins als vorbereitende Ma\u00dfnahmen zur Weiterverarbeitung durchgef\u00fchrt. Dar\u00fcber hinaus werden zus\u00e4tzlich notwendige Metriken auf Basis der Rohdaten berechnet.\r\nDie Unterordner sind nach den Quelldaten-Systemen strukturiert. Auch zuk\u00fcnftige Datenquellen wie bspw. das Admin-Tool erhalten einen separaten Unterordner erhalten.\r\n**Die Modelle sind nicht f\u00fcr die Verwendung in Reportings, Dashboards oder Ad-Hoc-Analysen gedacht.**\r\n\r\n**Mart:**\r\nAlle Modelle im Mart-Ordner/-Dataset bauen auf Modellen der Intermediate-Stufe auf. Es sollen im Wesentlichen Joins von verschiedenen Intermediate-Tabellen vorgenommen werden. Neue Metriken sollen nur berechnet werden, wenn es zuvor aufgrund der fehlenden Joins nicht m\u00f6glich war.\r\n**Jedes Modell enth\u00e4lt eine vollst\u00e4ndig vorbereitete Tabelle, die explizit als Input f\u00fcr einen konkreten Anwendungsfall dienen.**\r\n\r\n# Verwendung von Tags\r\n\r\nTags werden prim\u00e4r auf der Ebene der \"Mart-Modelle\" verwendet. Sie dienen der schnellen Filterung von Modellen f\u00fcr einen bestimmten Zweck. Jedem Modell k\u00f6nnen beliebig viele Tags zugeordnet werden. \r\n**Ein Tag sollte genutzt werden, um Quellsysteme & Vewerndungszwecke identifizieren zu k\u00f6nnen.** Werden neue Tags eingef\u00fchrt, so sind diese in der folgenden Auflistung zu erg\u00e4nzen:\r\n- **backenddaten:** Enth\u00e4lt Daten aus Backendsystemen (bspw. Admintool)\r\n- **bing ads:** Modell enth\u00e4lt Daten aus Bing Ads (Quellsystem)\r\n- **google ads:** Modell enth\u00e4lt Daten aus Google Ads (Quellsystem)\r\n- **google analytics:** Modell enth\u00e4lt Daten aus Google Analytics (Quellsystem)\r\n- **linkedin:** Modell enth\u00e4lt Daten aus LinkedIn (Quellsystem)\r\n- **meta:** Modell enth\u00e4lt Daten aus Meta (Quellsystem)\r\n- **performancereporting:** Dient als Input f\u00fcr Performancereporting der NDG\r\n- **vermarktungsdashboard:** Dient als Input f\u00fcr das Vermarktungsdashboard der NDG\r\n\r\n# Weitere Informationen\r\n-"}, "doc.bq_evo.campaign_stats": {"name": "campaign_stats", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\model_descriptions.md", "original_file_path": "models\\documentations\\model_descriptions.md", "unique_id": "doc.bq_evo.campaign_stats", "block_contents": "Enth\u00e4lt die wichtigsten Performancestatistiken auf Kampagnenebene."}, "doc.bq_evo.campaign_history": {"name": "campaign_history", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\model_descriptions.md", "original_file_path": "models\\documentations\\model_descriptions.md", "unique_id": "doc.bq_evo.campaign_history", "block_contents": "\u00c4nderungshistorie der Kampagnen. Jede Kampagne kann mehrfach auftauchen."}, "doc.bq_evo.unique_campaigns": {"name": "unique_campaigns", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\model_descriptions.md", "original_file_path": "models\\documentations\\model_descriptions.md", "unique_id": "doc.bq_evo.unique_campaigns", "block_contents": "Enth\u00e4lt eine \u00dcbersicht aller Kampagnen ohne historische Informationen. Dient als einfache Datenbank der wichtigsten Metainfos der Kampagnen. Jede Kampagne hat genau einen Eintrag."}, "doc.bq_evo.performancereporting_stats": {"name": "performancereporting_stats", "resource_type": "doc", "package_name": "bq_evo", "path": "documentations\\model_descriptions.md", "original_file_path": "models\\documentations\\model_descriptions.md", "unique_id": "doc.bq_evo.performancereporting_stats", "block_contents": "Enth\u00e4lt alle Vermarktungsstatistiken f\u00fcr das Performancereporting. Enth\u00e4lt jedoch keine Conversioninformationen."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.bq_evo.int_bing_ads_campaign_performance_joined_campaign_names": ["model.bq_evo.int_bing_ads_unique_campaigns", "model.bq_evo.stg_bing_ads_campaign_performance_daily_report"], "model.bq_evo.int_bing_ads_unique_campaigns": ["model.bq_evo.stg_bing_ads_campaign_history"], "model.bq_evo.int_google_ads_campaign_stats": ["model.bq_evo.int_google_ads_unique_campaigns", "model.bq_evo.stg_google_ads_campaign_stats"], "model.bq_evo.int_google_ads_unique_campaigns": ["model.bq_evo.stg_google_ads_campaign_history"], "model.bq_evo.int_google_analytics_all_campaigns": ["model.bq_evo.int_google_analytics_all_events", "model.bq_evo.stg_google_analytics_historic_campaigns"], "model.bq_evo.int_google_analytics_all_events": ["model.bq_evo.stg_google_analytics_352128287"], "model.bq_evo.int_google_analytics_all_purchases_GA4": ["model.bq_evo.int_google_analytics_all_events"], "model.bq_evo.int_google_analytics_NDG_conversionevents_GA4": ["model.bq_evo.int_google_analytics_all_events"], "model.bq_evo.int_linkedin_campaign_stats_joined_campaign_names": ["model.bq_evo.int_linkedin_unique_campaigns_reduced_information", "model.bq_evo.stg_linkedin_ad_analytics_by_campaign"], "model.bq_evo.int_linkedin_unique_campaigns_reduced_information": ["model.bq_evo.stg_linkedin_campaign_history"], "model.bq_evo.int_meta_campaign_stats_joined_campaign_names": ["model.bq_evo.int_meta_unique_campaigns", "model.bq_evo.stg_meta_campaign_stats"], "model.bq_evo.int_meta_unique_campaigns": ["model.bq_evo.stg_meta_campaign_information"], "model.bq_evo.mrt_metainformation_campaigns": ["model.bq_evo.int_bing_ads_unique_campaigns", "model.bq_evo.int_google_ads_unique_campaigns", "model.bq_evo.int_google_analytics_all_campaigns", "model.bq_evo.int_linkedin_unique_campaigns_reduced_information"], "model.bq_evo.mrt_bing_ads_basic_campaign_stats": ["model.bq_evo.int_bing_ads_campaign_performance_joined_campaign_names"], "model.bq_evo.mrt_google_ads_basic_campaign_stats": ["model.bq_evo.int_google_ads_campaign_stats"], "model.bq_evo.mrt_google_analytics_campaign_webperformance": ["model.bq_evo.int_google_analytics_all_events"], "model.bq_evo.mrt_google_analytics_merged_ua_ga4_transactions_summarized": ["model.bq_evo.int_google_analytics_all_purchases_GA4", "model.bq_evo.stg_google_analytics_historic_transactions"], "model.bq_evo.mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized": ["model.bq_evo.int_google_analytics_NDG_conversionevents_GA4", "model.bq_evo.stg_google_analytics_historic_goal_conversions"], "model.bq_evo.mrt_linkedin_basic_campaign_stats": ["model.bq_evo.int_linkedin_campaign_stats_joined_campaign_names"], "model.bq_evo.mrt_meta_basic_campaign_stats": ["model.bq_evo.int_meta_campaign_stats_joined_campaign_names"], "model.bq_evo.stg_bing_ads_campaign_history": ["source.bq_evo.bingads.campaign_history"], "model.bq_evo.stg_bing_ads_campaign_performance_daily_report": ["source.bq_evo.bingads.campaign_performance_daily_report"], "model.bq_evo.stg_google_ads_campaign_history": ["source.bq_evo.google_ads.campaign_history"], "model.bq_evo.stg_google_ads_campaign_stats": ["source.bq_evo.google_ads.campaign_stats"], "model.bq_evo.stg_google_analytics_352128287": ["source.bq_evo.analytics_352128287.events"], "model.bq_evo.stg_google_analytics_historic_campaigns": ["source.bq_evo.manual_data_upload.universal_analytics_historic_campaigns"], "model.bq_evo.stg_google_analytics_historic_goal_conversions": ["source.bq_evo.manual_data_upload.universal_analytics_historic_goal_conversions"], "model.bq_evo.stg_google_analytics_historic_transactions": ["source.bq_evo.manual_data_upload.universal_analytics_historic_transactions"], "model.bq_evo.stg_linkedin_ad_analytics_by_campaign": ["source.bq_evo.linkedin_ads.ad_analytics_by_campaign"], "model.bq_evo.stg_linkedin_campaign_history": ["source.bq_evo.linkedin_ads.campaign_history"], "model.bq_evo.stg_meta_campaign_information": ["source.bq_evo.facebook_ads.fb_campaign_information"], "model.bq_evo.stg_meta_campaign_stats": ["source.bq_evo.facebook_ads.fb_basic_performance_per_day"], "test.bq_evo.unique_int_google_ads_unique_campaigns_CampaignID.0c01e64aee": ["model.bq_evo.int_google_ads_unique_campaigns"], "test.bq_evo.not_null_int_google_ads_unique_campaigns_CampaignID.b78d28588f": ["model.bq_evo.int_google_ads_unique_campaigns"], "test.bq_evo.not_null_int_google_ads_campaign_stats_CampaignID.2475301ffd": ["model.bq_evo.int_google_ads_campaign_stats"], "test.bq_evo.unique_int_bing_ads_unique_campaigns_CampaignID.32ece24906": ["model.bq_evo.int_bing_ads_unique_campaigns"], "test.bq_evo.not_null_int_bing_ads_unique_campaigns_CampaignID.5214e7b227": ["model.bq_evo.int_bing_ads_unique_campaigns"], "test.bq_evo.not_null_int_bing_ads_campaign_performance_joined_campaign_names_CampaignID.5c326b9422": ["model.bq_evo.int_bing_ads_campaign_performance_joined_campaign_names"], "test.bq_evo.not_null_int_google_analytics_all_events_CampaignID.3357413cd2": ["model.bq_evo.int_google_analytics_all_events"], "test.bq_evo.not_null_int_google_analytics_all_campaigns_CampaignID.1e0bcee97c": ["model.bq_evo.int_google_analytics_all_campaigns"], "test.bq_evo.not_null_int_google_analytics_NDG_conversionevents_GA4_CampaignID.a44c364cf4": ["model.bq_evo.int_google_analytics_NDG_conversionevents_GA4"], "test.bq_evo.not_null_int_google_analytics_NDG_conversionevents_GA4_ZielvorhabenID.4bb5cb583c": ["model.bq_evo.int_google_analytics_NDG_conversionevents_GA4"], "test.bq_evo.not_null_int_google_analytics_all_purchases_GA4_CampaignID.2cf6a5e64e": ["model.bq_evo.int_google_analytics_all_purchases_GA4"], "test.bq_evo.not_null_mrt_google_ads_basic_campaign_stats_CampaignID.8f7cf788ca": ["model.bq_evo.mrt_google_ads_basic_campaign_stats"], "test.bq_evo.not_null_mrt_bing_ads_basic_campaign_stats_CampaignID.e363f600db": ["model.bq_evo.mrt_bing_ads_basic_campaign_stats"], "test.bq_evo.not_null_mrt_google_analytics_campaign_webperformance_CampaignID.6c662f597a": ["model.bq_evo.mrt_google_analytics_campaign_webperformance"], "test.bq_evo.not_null_mrt_meta_basic_campaign_stats_CampaignID.0fbc779058": ["model.bq_evo.mrt_meta_basic_campaign_stats"], "test.bq_evo.not_null_mrt_linkedin_basic_campaign_stats_CampaignID.b7d4e54502": ["model.bq_evo.mrt_linkedin_basic_campaign_stats"], "test.bq_evo.not_null_mrt_metainformation_campaigns_CampaignID.edc657ac09": ["model.bq_evo.mrt_metainformation_campaigns"], "test.bq_evo.not_null_stg_google_ads_campaign_stats_id.8e70867b27": ["model.bq_evo.stg_google_ads_campaign_stats"], "test.bq_evo.not_null_stg_google_ads_campaign_history_id.c1e39bce7d": ["model.bq_evo.stg_google_ads_campaign_history"], "test.bq_evo.not_null_stg_bing_ads_campaign_history_id.982e0ed0a8": ["model.bq_evo.stg_bing_ads_campaign_history"], "source.bq_evo.analytics_352128287.events": [], "source.bq_evo.google_ads.campaign_history": [], "source.bq_evo.google_ads.campaign_stats": [], "source.bq_evo.bingads.campaign_performance_daily_report": [], "source.bq_evo.bingads.campaign_history": [], "source.bq_evo.facebook_ads.fb_basic_performance_per_day": [], "source.bq_evo.facebook_ads.fb_campaign_information": [], "source.bq_evo.linkedin_ads.ad_analytics_by_campaign": [], "source.bq_evo.linkedin_ads.campaign_history": [], "source.bq_evo.manual_data_upload.universal_analytics_historic_campaigns": [], "source.bq_evo.manual_data_upload.universal_analytics_historic_goal_conversions": [], "source.bq_evo.manual_data_upload.universal_analytics_historic_transactions": []}, "child_map": {"model.bq_evo.int_bing_ads_campaign_performance_joined_campaign_names": ["model.bq_evo.mrt_bing_ads_basic_campaign_stats", "test.bq_evo.not_null_int_bing_ads_campaign_performance_joined_campaign_names_CampaignID.5c326b9422"], "model.bq_evo.int_bing_ads_unique_campaigns": ["model.bq_evo.int_bing_ads_campaign_performance_joined_campaign_names", "model.bq_evo.mrt_metainformation_campaigns", "test.bq_evo.not_null_int_bing_ads_unique_campaigns_CampaignID.5214e7b227", "test.bq_evo.unique_int_bing_ads_unique_campaigns_CampaignID.32ece24906"], "model.bq_evo.int_google_ads_campaign_stats": ["model.bq_evo.mrt_google_ads_basic_campaign_stats", "test.bq_evo.not_null_int_google_ads_campaign_stats_CampaignID.2475301ffd"], "model.bq_evo.int_google_ads_unique_campaigns": ["model.bq_evo.int_google_ads_campaign_stats", "model.bq_evo.mrt_metainformation_campaigns", "test.bq_evo.not_null_int_google_ads_unique_campaigns_CampaignID.b78d28588f", "test.bq_evo.unique_int_google_ads_unique_campaigns_CampaignID.0c01e64aee"], "model.bq_evo.int_google_analytics_all_campaigns": ["model.bq_evo.mrt_metainformation_campaigns", "test.bq_evo.not_null_int_google_analytics_all_campaigns_CampaignID.1e0bcee97c"], "model.bq_evo.int_google_analytics_all_events": ["model.bq_evo.int_google_analytics_NDG_conversionevents_GA4", "model.bq_evo.int_google_analytics_all_campaigns", "model.bq_evo.int_google_analytics_all_purchases_GA4", "model.bq_evo.mrt_google_analytics_campaign_webperformance", "test.bq_evo.not_null_int_google_analytics_all_events_CampaignID.3357413cd2"], "model.bq_evo.int_google_analytics_all_purchases_GA4": ["model.bq_evo.mrt_google_analytics_merged_ua_ga4_transactions_summarized", "test.bq_evo.not_null_int_google_analytics_all_purchases_GA4_CampaignID.2cf6a5e64e"], "model.bq_evo.int_google_analytics_NDG_conversionevents_GA4": ["model.bq_evo.mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized", "test.bq_evo.not_null_int_google_analytics_NDG_conversionevents_GA4_CampaignID.a44c364cf4", "test.bq_evo.not_null_int_google_analytics_NDG_conversionevents_GA4_ZielvorhabenID.4bb5cb583c"], "model.bq_evo.int_linkedin_campaign_stats_joined_campaign_names": ["model.bq_evo.mrt_linkedin_basic_campaign_stats"], "model.bq_evo.int_linkedin_unique_campaigns_reduced_information": ["model.bq_evo.int_linkedin_campaign_stats_joined_campaign_names", "model.bq_evo.mrt_metainformation_campaigns"], "model.bq_evo.int_meta_campaign_stats_joined_campaign_names": ["model.bq_evo.mrt_meta_basic_campaign_stats"], "model.bq_evo.int_meta_unique_campaigns": ["model.bq_evo.int_meta_campaign_stats_joined_campaign_names"], "model.bq_evo.mrt_metainformation_campaigns": ["test.bq_evo.not_null_mrt_metainformation_campaigns_CampaignID.edc657ac09"], "model.bq_evo.mrt_bing_ads_basic_campaign_stats": ["test.bq_evo.not_null_mrt_bing_ads_basic_campaign_stats_CampaignID.e363f600db"], "model.bq_evo.mrt_google_ads_basic_campaign_stats": ["test.bq_evo.not_null_mrt_google_ads_basic_campaign_stats_CampaignID.8f7cf788ca"], "model.bq_evo.mrt_google_analytics_campaign_webperformance": ["test.bq_evo.not_null_mrt_google_analytics_campaign_webperformance_CampaignID.6c662f597a"], "model.bq_evo.mrt_google_analytics_merged_ua_ga4_transactions_summarized": [], "model.bq_evo.mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized": [], "model.bq_evo.mrt_linkedin_basic_campaign_stats": ["test.bq_evo.not_null_mrt_linkedin_basic_campaign_stats_CampaignID.b7d4e54502"], "model.bq_evo.mrt_meta_basic_campaign_stats": ["test.bq_evo.not_null_mrt_meta_basic_campaign_stats_CampaignID.0fbc779058"], "model.bq_evo.stg_bing_ads_campaign_history": ["model.bq_evo.int_bing_ads_unique_campaigns", "test.bq_evo.not_null_stg_bing_ads_campaign_history_id.982e0ed0a8"], "model.bq_evo.stg_bing_ads_campaign_performance_daily_report": ["model.bq_evo.int_bing_ads_campaign_performance_joined_campaign_names"], "model.bq_evo.stg_google_ads_campaign_history": ["model.bq_evo.int_google_ads_unique_campaigns", "test.bq_evo.not_null_stg_google_ads_campaign_history_id.c1e39bce7d"], "model.bq_evo.stg_google_ads_campaign_stats": ["model.bq_evo.int_google_ads_campaign_stats", "test.bq_evo.not_null_stg_google_ads_campaign_stats_id.8e70867b27"], "model.bq_evo.stg_google_analytics_352128287": ["model.bq_evo.int_google_analytics_all_events"], "model.bq_evo.stg_google_analytics_historic_campaigns": ["model.bq_evo.int_google_analytics_all_campaigns"], "model.bq_evo.stg_google_analytics_historic_goal_conversions": ["model.bq_evo.mrt_google_analytics_NDG_merged_ua_ga4_conversions_summarized"], "model.bq_evo.stg_google_analytics_historic_transactions": ["model.bq_evo.mrt_google_analytics_merged_ua_ga4_transactions_summarized"], "model.bq_evo.stg_linkedin_ad_analytics_by_campaign": ["model.bq_evo.int_linkedin_campaign_stats_joined_campaign_names"], "model.bq_evo.stg_linkedin_campaign_history": ["model.bq_evo.int_linkedin_unique_campaigns_reduced_information"], "model.bq_evo.stg_meta_campaign_information": ["model.bq_evo.int_meta_unique_campaigns"], "model.bq_evo.stg_meta_campaign_stats": ["model.bq_evo.int_meta_campaign_stats_joined_campaign_names"], "test.bq_evo.unique_int_google_ads_unique_campaigns_CampaignID.0c01e64aee": [], "test.bq_evo.not_null_int_google_ads_unique_campaigns_CampaignID.b78d28588f": [], "test.bq_evo.not_null_int_google_ads_campaign_stats_CampaignID.2475301ffd": [], "test.bq_evo.unique_int_bing_ads_unique_campaigns_CampaignID.32ece24906": [], "test.bq_evo.not_null_int_bing_ads_unique_campaigns_CampaignID.5214e7b227": [], "test.bq_evo.not_null_int_bing_ads_campaign_performance_joined_campaign_names_CampaignID.5c326b9422": [], "test.bq_evo.not_null_int_google_analytics_all_events_CampaignID.3357413cd2": [], "test.bq_evo.not_null_int_google_analytics_all_campaigns_CampaignID.1e0bcee97c": [], "test.bq_evo.not_null_int_google_analytics_NDG_conversionevents_GA4_CampaignID.a44c364cf4": [], "test.bq_evo.not_null_int_google_analytics_NDG_conversionevents_GA4_ZielvorhabenID.4bb5cb583c": [], "test.bq_evo.not_null_int_google_analytics_all_purchases_GA4_CampaignID.2cf6a5e64e": [], "test.bq_evo.not_null_mrt_google_ads_basic_campaign_stats_CampaignID.8f7cf788ca": [], "test.bq_evo.not_null_mrt_bing_ads_basic_campaign_stats_CampaignID.e363f600db": [], "test.bq_evo.not_null_mrt_google_analytics_campaign_webperformance_CampaignID.6c662f597a": [], "test.bq_evo.not_null_mrt_meta_basic_campaign_stats_CampaignID.0fbc779058": [], "test.bq_evo.not_null_mrt_linkedin_basic_campaign_stats_CampaignID.b7d4e54502": [], "test.bq_evo.not_null_mrt_metainformation_campaigns_CampaignID.edc657ac09": [], "test.bq_evo.not_null_stg_google_ads_campaign_stats_id.8e70867b27": [], "test.bq_evo.not_null_stg_google_ads_campaign_history_id.c1e39bce7d": [], "test.bq_evo.not_null_stg_bing_ads_campaign_history_id.982e0ed0a8": [], "source.bq_evo.analytics_352128287.events": ["model.bq_evo.stg_google_analytics_352128287"], "source.bq_evo.google_ads.campaign_history": ["model.bq_evo.stg_google_ads_campaign_history"], "source.bq_evo.google_ads.campaign_stats": ["model.bq_evo.stg_google_ads_campaign_stats"], "source.bq_evo.bingads.campaign_performance_daily_report": ["model.bq_evo.stg_bing_ads_campaign_performance_daily_report"], "source.bq_evo.bingads.campaign_history": ["model.bq_evo.stg_bing_ads_campaign_history"], "source.bq_evo.facebook_ads.fb_basic_performance_per_day": ["model.bq_evo.stg_meta_campaign_stats"], "source.bq_evo.facebook_ads.fb_campaign_information": ["model.bq_evo.stg_meta_campaign_information"], "source.bq_evo.linkedin_ads.ad_analytics_by_campaign": ["model.bq_evo.stg_linkedin_ad_analytics_by_campaign"], "source.bq_evo.linkedin_ads.campaign_history": ["model.bq_evo.stg_linkedin_campaign_history"], "source.bq_evo.manual_data_upload.universal_analytics_historic_campaigns": ["model.bq_evo.stg_google_analytics_historic_campaigns"], "source.bq_evo.manual_data_upload.universal_analytics_historic_goal_conversions": ["model.bq_evo.stg_google_analytics_historic_goal_conversions"], "source.bq_evo.manual_data_upload.universal_analytics_historic_transactions": ["model.bq_evo.stg_google_analytics_historic_transactions"]}, "group_map": {}, "semantic_models": {}}